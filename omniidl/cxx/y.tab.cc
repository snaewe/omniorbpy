
/*  A Bison parser, made from /home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	IDENTIFIER	257
#define	ABSTRACT	258
#define	ANY	259
#define	ATTRIBUTE	260
#define	BOOLEAN	261
#define	CASE	262
#define	CHAR	263
#define	CONST	264
#define	CONTEXT	265
#define	CUSTOM	266
#define	DEFAULT	267
#define	DOUBLE	268
#define	ENUM	269
#define	EXCEPTION	270
#define	FACTORY	271
#define	FALSE_	272
#define	FIXED	273
#define	FLOAT	274
#define	IN	275
#define	INOUT	276
#define	INTERFACE	277
#define	LONG	278
#define	MODULE	279
#define	NATIVE	280
#define	OBJECT	281
#define	OCTET	282
#define	ONEWAY	283
#define	OUT	284
#define	PRIVATE	285
#define	PUBLIC	286
#define	RAISES	287
#define	READONLY	288
#define	SEQUENCE	289
#define	SHORT	290
#define	STRING	291
#define	STRUCT	292
#define	SUPPORTS	293
#define	SWITCH	294
#define	TRUE_	295
#define	TRUNCATABLE	296
#define	TYPEDEF	297
#define	UNION	298
#define	UNSIGNED	299
#define	VALUEBASE	300
#define	VALUETYPE	301
#define	VOID	302
#define	WCHAR	303
#define	WSTRING	304
#define	PRAGMA	305
#define	PRAGMA_PREFIX	306
#define	PRAGMA_ID	307
#define	PRAGMA_VERSION	308
#define	END_PRAGMA	309
#define	UNKNOWN_PRAGMA_BODY	310
#define	INTEGER_LITERAL	311
#define	CHARACTER_LITERAL	312
#define	WIDE_CHARACTER_LITERAL	313
#define	FLOATING_PT_LITERAL	314
#define	STRING_LITERAL	315
#define	WIDE_STRING_LITERAL	316
#define	FIXED_PT_LITERAL	317
#define	SCOPE_DELIM	318
#define	LEFT_SHIFT	319
#define	RIGHT_SHIFT	320

#line 59 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"


#include <stdlib.h>
#include <string.h>

#include <idlutil.h>
#include <idlerr.h>
#include <idlrepoId.h>
#include <idlscope.h>
#include <idltype.h>
#include <idlexpr.h>
#include <idlast.h>

#define YYDEBUG 1

// Globals from lexer
extern int            yylineno;
extern char*          currentFile;
extern _CORBA_Boolean mainFile;

void yyerror(char *s) {
}
extern int yylex();

// Nasty hack for abstract valuetypes
ValueAbs* valueabs_hack = 0;

#ifdef __VMS
/*  Apparently, __ALLOCA is defined for some versions of the C (but not C++)
    compiler on VAX. */
#if defined(__ALPHA) || defined(__DECC) && __DECC_VER >= 60000000
#include <builtins.h>
#define alloca __ALLOCA
#else
#define alloca malloc
#endif
#endif


#line 99 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
typedef union {
  char*                    id_val;
  int                      int_val;
  _CORBA_ULong             ulong_val;
  IdlIntLiteral            int_literal_val;
#ifndef __VMS
  IdlFloatLiteral          float_literal_val;
#else
  double                   float_literal_val;
#endif
  char                     char_val;
  char*                    string_val;
  _CORBA_WChar             wchar_val;
  _CORBA_WChar*            wstring_val;
  _CORBA_Boolean           boolean_val;
  int                      fixed_val; // ***
  IdlType*                 type_val;
  TypeSpec*                type_spec_val;
  IdlExpr*                 expr_val;
  ScopedName*              scopedname_val;
  Decl*                    decl_val;
  Module*                  module_val;
  Interface*               interface_val;
  InheritSpec*             inheritspec_val;
  Forward*                 forward_val;
  Const*                   const_val;
  Typedef*                 typedef_val;
  Struct*                  struct_val;
  Exception*               exception_val;
  Member*                  member_val;
  Declarator*              declarator_val;
  Union*                   union_val;
  UnionCase*               union_case_val;
  CaseLabel*               case_label_val;
  ValueBase*               value_base_val;
  Value*                   value_val;
  ValueForward*            value_forward_val;
  ValueBox*                value_box_val;
  ValueAbs*                value_abs_val;
  ValueInheritSpec*        valueinheritspec_val;
  ValueInheritSupportSpec* valueinheritsupportspec_val;
  StateMember*             statemember_val;
  Factory*                 factory_val;
  Enumerator*              enumerator_val;
  Enum*                    enum_val;
  ArraySize*               array_size_val;
  Attribute*               attribute_val;
  Operation*               operation_val;
  Parameter*               parameter_val;
  RaisesSpec*              raisesspec_val;
  ContextSpec*             contextspec_val;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		492
#define	YYFLAG		-32768
#define	YYNTBASE	89

#define YYTRANSLATE(x) ((unsigned)(x) <= 320 ? yytranslate[x] : 231)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,    82,    77,     2,    72,
    73,    80,    78,    71,    79,    88,    81,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    70,    67,    84,
    74,    85,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    86,     2,    87,    76,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    68,    75,    69,    83,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     1,     3,     5,     8,    11,    14,    17,    20,    23,
    26,    28,    30,    32,    38,    39,    46,    49,    52,    54,
    56,    61,    62,    69,    72,    76,    82,    83,    85,    87,
    88,    91,    94,    97,   100,   103,   106,   108,   110,   111,
   113,   116,   119,   125,   127,   129,   131,   134,   138,   140,
   142,   144,   146,   149,   153,   157,   158,   166,   167,   176,
   178,   183,   187,   192,   195,   199,   204,   207,   210,   213,
   214,   216,   218,   222,   224,   225,   228,   230,   232,   234,
   239,   241,   243,   249,   255,   258,   259,   261,   263,   267,
   271,   277,   279,   281,   283,   285,   287,   289,   291,   293,
   295,   297,   299,   301,   305,   307,   311,   313,   317,   319,
   323,   327,   329,   333,   337,   339,   343,   347,   351,   354,
   356,   358,   360,   362,   364,   366,   370,   372,   374,   376,
   378,   380,   382,   384,   386,   388,   391,   393,   396,   398,
   400,   402,   405,   407,   409,   411,   414,   417,   419,   421,
   423,   425,   427,   429,   431,   433,   435,   437,   439,   441,
   443,   445,   447,   449,   451,   453,   455,   457,   459,   462,
   468,   470,   472,   474,   476,   478,   480,   483,   485,   487,
   489,   491,   493,   495,   497,   500,   502,   504,   506,   509,
   512,   516,   518,   520,   522,   524,   526,   528,   535,   538,
   541,   543,   546,   551,   553,   567,   570,   573,   575,   577,
   579,   581,   583,   585,   587,   590,   595,   597,   600,   605,
   609,   612,   619,   622,   625,   628,   634,   636,   643,   648,
   653,   655,   660,   662,   665,   667,   670,   674,   679,   680,
   682,   685,   691,   698,   701,   704,   705,   708,   715,   718,
   722,   723,   725,   727,   729,   731,   736,   740,   744,   747,
   753,   757,   759,   761,   763,   764,   767,   772,   775,   781,
   782,   785,   790,   793,   799,   801,   803,   805,   807,   814,
   816,   818,   820,   822,   824,   826,   829,   830,   832,   836,
   839,   844,   848,   855,   859,   863,   865
};

static const short yyrhs[] = {    -1,
    90,     0,    91,     0,    90,    91,     0,   148,    67,     0,
   131,    67,     0,   201,    67,     0,    95,    67,     0,    92,
    67,     0,   109,    67,     0,   223,     0,   226,     0,     1,
     0,    94,   225,    68,    90,    69,     0,     0,    94,     1,
    93,    68,    90,    69,     0,    94,     1,     0,    25,     3,
     0,    96,     0,    98,     0,    99,    68,   101,    69,     0,
     0,    99,     1,    97,    68,   101,    69,     0,    99,     1,
     0,   100,    23,     3,     0,   100,    23,     3,   225,   104,
     0,     0,     4,     0,   102,     0,     0,   102,   103,     0,
   148,    67,     0,   131,    67,     0,   201,    67,     0,   198,
    67,     0,   204,    67,     0,   223,     0,     1,     0,     0,
   105,     0,    70,   106,     0,   107,   225,     0,   106,    71,
   225,   107,   225,     0,     1,     0,   108,     0,     3,     0,
    64,     3,     0,   108,    64,     3,     0,   115,     0,   112,
     0,   111,     0,   110,     0,    47,     3,     0,     4,    47,
     3,     0,    47,     3,   150,     0,     0,     4,    47,     3,
   113,    68,   102,    69,     0,     0,     4,    47,     3,   117,
   114,    68,   102,    69,     0,     1,     0,   116,    68,   122,
    69,     0,    47,     3,   117,     0,    12,    47,     3,   117,
     0,    47,     3,     0,    12,    47,     3,     0,    70,   118,
    39,   106,     0,    70,   118,     0,    39,   106,     0,   119,
   120,     0,     0,    42,     0,   121,     0,   120,    71,   121,
     0,   108,     0,     0,   122,   123,     0,   103,     0,   124,
     0,   126,     0,   125,   150,   155,    67,     0,    32,     0,
    31,     0,   127,    72,   128,    73,    67,     0,   127,    72,
     1,    73,    67,     0,    17,     3,     0,     0,   129,     0,
   130,     0,   129,    71,   130,     0,    21,   219,     3,     0,
    10,   132,     3,    74,   133,     0,   160,     0,   169,     0,
   170,     0,   171,     0,   159,     0,   193,     0,   194,     0,
   221,     0,   108,     0,   172,     0,   134,     0,   135,     0,
   134,    75,   135,     0,   136,     0,   135,    76,   136,     0,
   137,     0,   136,    77,   137,     0,   138,     0,   137,    66,
   138,     0,   137,    65,   138,     0,   139,     0,   138,    78,
   139,     0,   138,    79,   139,     0,   140,     0,   139,    80,
   140,     0,   139,    81,   140,     0,   139,    82,   140,     0,
   141,   142,     0,   142,     0,    79,     0,    78,     0,    83,
     0,   108,     0,   143,     0,    72,   133,    73,     0,    57,
     0,   144,     0,   145,     0,    58,     0,    59,     0,    63,
     0,    60,     0,   146,     0,    61,     0,   144,    61,     0,
    62,     0,   145,    62,     0,    41,     0,    18,     0,   133,
     0,    43,   149,     0,   175,     0,   179,     0,   188,     0,
    26,     3,     0,   150,   155,     0,   151,     0,   154,     0,
   152,     0,   153,     0,   108,     0,   159,     0,   160,     0,
   169,     0,   170,     0,   171,     0,   172,     0,   173,     0,
   174,     0,   222,     0,   192,     0,   193,     0,   194,     0,
   220,     0,   175,     0,   179,     0,   188,     0,   156,   225,
     0,   155,    71,   225,   156,   225,     0,   157,     0,   158,
     0,     3,     0,   195,     0,    20,     0,    14,     0,    24,
    14,     0,   161,     0,   165,     0,   162,     0,   163,     0,
   164,     0,    36,     0,    24,     0,    24,    24,     0,   166,
     0,   167,     0,   168,     0,    45,    36,     0,    45,    24,
     0,    45,    24,    24,     0,     9,     0,    49,     0,     7,
     0,    28,     0,     5,     0,    27,     0,   176,   225,    68,
   225,   177,    69,     0,   176,     1,     0,    38,     3,     0,
   178,     0,   177,   178,     0,   150,   155,    67,   225,     0,
     1,     0,   180,   225,    40,    72,   225,   181,   225,    73,
   225,    68,   225,   182,    69,     0,   180,     1,     0,    44,
     3,     0,   160,     0,   169,     0,   171,     0,   188,     0,
   108,     0,   183,     0,   184,     0,   183,   184,     0,   185,
   187,    67,   225,     0,   186,     0,   185,   186,     0,     8,
   133,    70,   225,     0,    13,    70,   225,     0,   150,   156,
     0,   189,   225,    68,   225,   190,    69,     0,   189,     1,
     0,    15,     3,     0,   191,   225,     0,   190,    71,   225,
   191,   225,     0,     3,     0,    35,    84,   151,    71,   147,
    85,     0,    35,    84,   151,    85,     0,    37,    84,   147,
    85,     0,    37,     0,    50,    84,   147,    85,     0,    50,
     0,     3,   196,     0,   197,     0,   196,   197,     0,    86,
   147,    87,     0,   199,     6,   219,   200,     0,     0,    34,
     0,   157,   225,     0,   200,    71,   225,   157,   225,     0,
   202,   225,    68,   225,   203,    69,     0,   202,     1,     0,
    16,     3,     0,     0,   203,   178,     0,   205,   225,   209,
   225,   213,   216,     0,   205,     1,     0,   206,   208,     3,
     0,     0,   207,     0,    29,     0,   219,     0,    48,     0,
    72,   225,   210,    73,     0,    72,   225,    73,     0,    72,
     1,    73,     0,   211,   225,     0,   210,    71,   225,   211,
   225,     0,   212,   219,     3,     0,    21,     0,    30,     0,
    22,     0,     0,   214,   225,     0,    33,    72,   215,    73,
     0,   108,   225,     0,   215,    71,   225,   108,   225,     0,
     0,   217,   225,     0,    11,    72,   218,    73,     0,   144,
   225,     0,   218,    71,   225,   144,   225,     0,   152,     0,
   193,     0,   194,     0,   108,     0,    19,    84,   147,    71,
   147,    85,     0,    19,     0,    46,     0,   227,     0,   228,
     0,   229,     0,   223,     0,   224,   223,     0,     0,   224,
     0,    52,   144,    55,     0,    52,     1,     0,    53,   108,
   144,    55,     0,    53,     1,    55,     0,    54,   108,    57,
    88,    57,    55,     0,    54,     1,    55,     0,    51,   230,
    55,     0,    56,     0,   230,    56,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   362,   364,   370,   372,   378,   380,   381,   382,   383,   384,
   385,   386,   387,   393,   398,   401,   405,   413,   417,   419,
   422,   427,   430,   434,   442,   448,   455,   457,   460,   464,
   466,   472,   474,   475,   476,   477,   478,   479,   485,   487,
   490,   494,   498,   506,   513,   517,   521,   524,   534,   536,
   537,   538,   541,   545,   550,   558,   561,   566,   570,   575,
   587,   594,   600,   605,   608,   613,   617,   620,   625,   632,
   634,   637,   641,   651,   655,   657,   663,   665,   666,   669,
   677,   679,   682,   687,   695,   701,   703,   706,   708,   714,
   722,   728,   730,   731,   732,   733,   734,   735,   736,   737,
   740,   743,   747,   749,   752,   754,   757,   759,   764,   766,
   769,   774,   776,   777,   780,   782,   785,   788,   793,   799,
   802,   804,   805,   808,   812,   813,   816,   820,   823,   826,
   829,   832,   835,   838,   843,   845,   854,   856,   865,   867,
   870,   878,   880,   881,   882,   883,   888,   896,   898,   901,
   903,   904,   909,   911,   912,   913,   914,   915,   916,   917,
   918,   921,   923,   924,   925,   928,   930,   931,   934,   936,
   942,   944,   947,   953,   957,   959,   960,   963,   965,   968,
   970,   971,   974,   978,   982,   986,   988,   989,   992,   996,
  1000,  1004,  1008,  1012,  1016,  1020,  1024,  1028,  1033,  1041,
  1047,  1049,  1055,  1061,  1068,  1077,  1085,  1091,  1093,  1094,
  1095,  1096,  1102,  1106,  1108,  1114,  1121,  1123,  1129,  1133,
  1138,  1145,  1150,  1157,  1163,  1165,  1171,  1177,  1181,  1186,
  1188,  1193,  1195,  1200,  1206,  1208,  1214,  1218,  1224,  1226,
  1229,  1231,  1237,  1242,  1250,  1256,  1258,  1264,  1270,  1278,
  1284,  1286,  1289,  1293,  1295,  1298,  1300,  1301,  1308,  1310,
  1316,  1322,  1324,  1325,  1328,  1330,  1333,  1337,  1341,  1347,
  1349,  1352,  1356,  1360,  1366,  1368,  1369,  1370,  1375,  1382,
  1389,  1393,  1395,  1396,  1399,  1401,  1404,  1406,  1409,  1413,
  1418,  1423,  1428,  1433,  1438,  1444,  1446
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","IDENTIFIER",
"ABSTRACT","ANY","ATTRIBUTE","BOOLEAN","CASE","CHAR","CONST","CONTEXT","CUSTOM",
"DEFAULT","DOUBLE","ENUM","EXCEPTION","FACTORY","FALSE_","FIXED","FLOAT","IN",
"INOUT","INTERFACE","LONG","MODULE","NATIVE","OBJECT","OCTET","ONEWAY","OUT",
"PRIVATE","PUBLIC","RAISES","READONLY","SEQUENCE","SHORT","STRING","STRUCT",
"SUPPORTS","SWITCH","TRUE_","TRUNCATABLE","TYPEDEF","UNION","UNSIGNED","VALUEBASE",
"VALUETYPE","VOID","WCHAR","WSTRING","PRAGMA","PRAGMA_PREFIX","PRAGMA_ID","PRAGMA_VERSION",
"END_PRAGMA","UNKNOWN_PRAGMA_BODY","INTEGER_LITERAL","CHARACTER_LITERAL","WIDE_CHARACTER_LITERAL",
"FLOATING_PT_LITERAL","STRING_LITERAL","WIDE_STRING_LITERAL","FIXED_PT_LITERAL",
"SCOPE_DELIM","LEFT_SHIFT","RIGHT_SHIFT","';'","'{'","'}'","':'","','","'('",
"')'","'='","'|'","'^'","'&'","'+'","'-'","'*'","'/'","'%'","'~'","'<'","'>'",
"'['","']'","'.'","start","definition_plus","definition","module","@1","module_header",
"interface","interface_dcl","@2","forward_dcl","interface_header","abstract_opt",
"interface_body","export_star","export","interface_inheritance_spec_opt","interface_inheritance_spec",
"interface_inheritance_list","interface_name","scoped_name","value","value_forward_dcl",
"value_box_dcl","value_abs_dcl","@3","@4","value_dcl","value_header","value_inheritance_spec",
"value_value_inheritance_spec","truncatable_opt","value_inheritance_list","value_name",
"value_element_star","value_element","state_member","member_access","init_dcl",
"init_dcl_header","init_param_decls_opt","init_param_decls","init_param_decl",
"const_dcl","const_type","const_exp","or_expr","xor_expr","and_expr","shift_expr",
"add_expr","mult_expr","unary_expr","unary_operator","primary_expr","literal",
"string_literal_plus","wide_string_literal_plus","boolean_literal","positive_int_const",
"type_dcl","type_declarator","type_spec","simple_type_spec","base_type_spec",
"template_type_spec","constr_type_spec","declarators","declarator","simple_declarator",
"complex_declarator","floating_pt_type","integer_type","signed_int","signed_short_int",
"signed_long_int","signed_long_long_int","unsigned_int","unsigned_short_int",
"unsigned_long_int","unsigned_long_long_int","char_type","wide_char_type","boolean_type",
"octet_type","any_type","object_type","struct_type","struct_header","member_list",
"member","union_type","union_header","switch_type_spec","switch_body","case_plus",
"case","case_label_plus","case_label","element_spec","enum_type","enum_header",
"enumerator_list","enumerator","sequence_type","string_type","wide_string_type",
"array_declarator","fixed_array_size_plus","fixed_array_size","attr_dcl","readonly_opt",
"simple_declarator_list","except_dcl","except_header","member_star","op_dcl",
"op_header","op_attribute_opt","op_attribute","op_type_spec","parameter_dcls",
"param_dcl_list","param_dcl","param_attribute","raises_expr_opt","raises_expr",
"scoped_name_list","context_expr_opt","context_expr","string_literal_list","param_type_spec",
"fixed_pt_type","fixed_pt_const_type","value_base_type","pragma","pragmas","pragmas_opt",
"pragma_prefix","pragma_id","pragma_version","unknown_pragma","unknown_pragma_body_plus", NULL
};
#endif

static const short yyr1[] = {     0,
    89,    89,    90,    90,    91,    91,    91,    91,    91,    91,
    91,    91,    91,    92,    93,    92,    92,    94,    95,    95,
    96,    97,    96,    96,    98,    99,   100,   100,   101,   102,
   102,   103,   103,   103,   103,   103,   103,   103,   104,   104,
   105,   106,   106,   106,   107,   108,   108,   108,   109,   109,
   109,   109,   110,   110,   111,   113,   112,   114,   112,   112,
   115,   116,   116,   116,   116,   117,   117,   117,   118,   119,
   119,   120,   120,   121,   122,   122,   123,   123,   123,   124,
   125,   125,   126,   126,   127,   128,   128,   129,   129,   130,
   131,   132,   132,   132,   132,   132,   132,   132,   132,   132,
   132,   133,   134,   134,   135,   135,   136,   136,   137,   137,
   137,   138,   138,   138,   139,   139,   139,   139,   140,   140,
   141,   141,   141,   142,   142,   142,   143,   143,   143,   143,
   143,   143,   143,   143,   144,   144,   145,   145,   146,   146,
   147,   148,   148,   148,   148,   148,   149,   150,   150,   151,
   151,   151,   152,   152,   152,   152,   152,   152,   152,   152,
   152,   153,   153,   153,   153,   154,   154,   154,   155,   155,
   156,   156,   157,   158,   159,   159,   159,   160,   160,   161,
   161,   161,   162,   163,   164,   165,   165,   165,   166,   167,
   168,   169,   170,   171,   172,   173,   174,   175,   175,   176,
   177,   177,   178,   178,   179,   179,   180,   181,   181,   181,
   181,   181,   182,   183,   183,   184,   185,   185,   186,   186,
   187,   188,   188,   189,   190,   190,   191,   192,   192,   193,
   193,   194,   194,   195,   196,   196,   197,   198,   199,   199,
   200,   200,   201,   201,   202,   203,   203,   204,   204,   205,
   206,   206,   207,   208,   208,   209,   209,   209,   210,   210,
   211,   212,   212,   212,   213,   213,   214,   215,   215,   216,
   216,   217,   218,   218,   219,   219,   219,   219,   220,   221,
   222,   223,   223,   223,   224,   224,   225,   225,   226,   226,
   227,   227,   228,   228,   229,   230,   230
};

static const short yyr2[] = {     0,
     0,     1,     1,     2,     2,     2,     2,     2,     2,     2,
     1,     1,     1,     5,     0,     6,     2,     2,     1,     1,
     4,     0,     6,     2,     3,     5,     0,     1,     1,     0,
     2,     2,     2,     2,     2,     2,     1,     1,     0,     1,
     2,     2,     5,     1,     1,     1,     2,     3,     1,     1,
     1,     1,     2,     3,     3,     0,     7,     0,     8,     1,
     4,     3,     4,     2,     3,     4,     2,     2,     2,     0,
     1,     1,     3,     1,     0,     2,     1,     1,     1,     4,
     1,     1,     5,     5,     2,     0,     1,     1,     3,     3,
     5,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     3,     1,     3,     1,     3,     1,     3,
     3,     1,     3,     3,     1,     3,     3,     3,     2,     1,
     1,     1,     1,     1,     1,     3,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     2,     1,     2,     1,     1,
     1,     2,     1,     1,     1,     2,     2,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     2,     5,
     1,     1,     1,     1,     1,     1,     2,     1,     1,     1,
     1,     1,     1,     1,     2,     1,     1,     1,     2,     2,
     3,     1,     1,     1,     1,     1,     1,     6,     2,     2,
     1,     2,     4,     1,    13,     2,     2,     1,     1,     1,
     1,     1,     1,     1,     2,     4,     1,     2,     4,     3,
     2,     6,     2,     2,     2,     5,     1,     6,     4,     4,
     1,     4,     1,     2,     1,     2,     3,     4,     0,     1,
     2,     5,     6,     2,     2,     0,     2,     6,     2,     3,
     0,     1,     1,     1,     1,     4,     3,     3,     2,     5,
     3,     1,     1,     1,     0,     2,     4,     2,     5,     0,
     2,     4,     2,     5,     1,     1,     1,     1,     6,     1,
     1,     1,     1,     1,     1,     2,     0,     1,     3,     2,
     4,     3,     6,     3,     3,     1,     2
};

static const short yydefact[] = {     0,
    13,    28,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     3,     0,     0,
     0,    19,    20,     0,     0,     0,    52,    51,    50,    49,
     0,     0,     0,   143,     0,   144,     0,   145,     0,     0,
     0,    11,    12,   282,   283,   284,     0,    46,   194,   192,
   176,   280,   175,   184,   195,   183,   231,     0,   193,   233,
     0,   100,     0,    96,    92,   178,   180,   181,   182,   179,
   186,   187,   188,    93,    94,    95,   101,    97,    98,    99,
     0,   224,   245,    18,   146,   200,   196,     0,   197,     0,
   281,   152,   142,     0,   148,   150,   151,   149,   153,   154,
   155,   156,   157,   158,   159,   160,   166,   167,   168,   162,
   163,   164,   165,   161,   207,    53,   296,     0,   290,   135,
     0,     0,     0,     0,     0,     4,     9,    15,   285,   288,
     0,     8,    22,    30,     0,    10,    75,     6,     5,   199,
     0,   206,     0,   223,     0,     7,   244,     0,    54,   177,
   185,     0,   190,   189,     0,    47,     0,     0,    65,     0,
     0,   173,   147,   287,   171,   172,   174,     0,    70,    62,
    55,   295,   297,   289,   136,   292,     0,   294,     0,     0,
   286,     0,     0,     0,     0,   287,     0,   287,     0,   287,
   287,     0,    58,   140,   139,   127,   130,   131,   133,   137,
   132,     0,   122,   121,   123,   124,   141,   102,   103,   105,
   107,   109,   112,   115,     0,   120,   125,   128,   129,   134,
     0,   191,     0,    48,     0,    63,     0,     0,     0,   234,
   235,   287,   169,    44,    68,   287,    45,    71,    67,     0,
   291,     0,     0,     0,    30,    21,    38,   253,   240,    31,
     0,     0,     0,     0,     0,     0,     0,     0,   252,    37,
    39,     0,    82,    81,    61,    77,    76,    78,     0,    79,
     0,     0,   287,     0,   246,    30,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   119,   138,
   230,   232,    91,     0,     0,   229,     0,   236,     0,   287,
    42,     0,    74,    69,    72,     0,     0,    14,     0,    33,
    32,    35,     0,    34,    36,   249,     0,   255,   278,   275,
   276,   277,     0,   254,     0,    26,    40,    85,     0,     0,
   204,     0,     0,   201,     0,   227,     0,   287,     0,     0,
    30,   126,   104,   106,   108,   111,   110,   113,   114,   116,
   117,   118,     0,     0,   237,   287,     0,    66,     0,   293,
    16,    23,     0,     0,   287,   250,    41,     0,     0,     0,
     0,    87,    88,     0,   198,   202,   184,   212,   208,   209,
   210,   287,   211,   222,   287,   225,   243,   247,    57,     0,
   279,   228,   170,   287,    73,   173,   287,   238,     0,     0,
   265,    80,     0,     0,     0,     0,   287,     0,     0,    59,
    43,   241,   287,   258,   262,   264,   263,   257,     0,   287,
     0,     0,   270,   287,    84,    90,    83,    89,   203,   287,
   287,     0,   287,   256,   259,     0,     0,     0,   248,   287,
   266,     0,   226,   287,     0,   261,   287,     0,     0,   271,
   287,   242,   287,   268,   287,   267,   287,     0,     0,   260,
     0,   273,   287,   272,     0,     0,     0,   213,   214,     0,
   217,   287,     0,     0,   287,   205,   215,     0,   218,     0,
   269,   287,   287,   220,   221,   287,   274,   219,   216,     0,
     0,     0
};

static const short yydefgoto[] = {   490,
    17,    18,    19,   180,    20,    21,    22,   183,    23,    24,
    25,   184,   185,   250,   326,   327,   235,   236,   206,    26,
    27,    28,    29,   192,   277,    30,    31,   170,   239,   240,
   304,   305,   187,   267,   268,   269,   270,   271,   371,   372,
   373,    32,    63,   207,   208,   209,   210,   211,   212,   213,
   214,   215,   216,   217,   218,   219,   220,   221,    33,    93,
   332,    95,    96,    97,    98,   163,   164,   165,   166,    99,
   100,    66,    67,    68,    69,    70,    71,    72,    73,   101,
   102,   103,   104,   105,   106,    34,    35,   333,   334,    36,
    37,   382,   467,   468,   469,   470,   471,   480,    38,    39,
   337,   338,   110,   111,   112,   167,   230,   231,   253,   254,
   398,    40,    41,   339,   256,   257,   258,   259,   323,   365,
   419,   420,   421,   423,   424,   448,   439,   440,   458,   324,
   113,    80,   114,   129,   130,   131,    43,    44,    45,    46,
   118
};

static const short yypact[] = {  1248,
   -30,     6,  1217,    21,    42,    69,    78,   108,   121,  1025,
   134,   136,   111,    32,    46,    51,  1293,-32768,   118,    74,
   151,-32768,-32768,    31,   152,   154,-32768,-32768,-32768,-32768,
   156,   161,   171,-32768,   102,-32768,   158,-32768,   115,   176,
   125,-32768,-32768,-32768,-32768,-32768,   259,-32768,-32768,-32768,
-32768,-32768,-32768,   140,-32768,-32768,   183,    19,-32768,   188,
   271,   216,   280,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   283,-32768,-32768,-32768,-32768,-32768,-32768,   203,-32768,   204,
-32768,   216,-32768,   286,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   877,-32768,   194,-32768,-32768,
   116,   235,    71,   236,    66,-32768,-32768,   225,-32768,   182,
   226,-32768,   228,-32768,   290,-32768,-32768,-32768,-32768,-32768,
   229,-32768,   258,-32768,   232,-32768,-32768,   233,   124,-32768,
-32768,    26,   278,-32768,    26,-32768,   300,   230,    27,    26,
  1073,   220,   237,   182,-32768,-32768,-32768,    56,   265,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   119,-32768,   221,   245,
-32768,  1338,   246,   247,   559,    90,   503,   182,   243,   182,
   182,   249,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,    26,-32768,-32768,-32768,   216,-32768,   244,   248,   251,
   211,   -18,   159,-32768,    88,-32768,-32768,   260,   261,-32768,
   241,-32768,   253,-32768,    26,-32768,   270,   -37,    26,   220,
-32768,   182,-32768,-32768,   272,   182,   216,-32768,   281,    67,
-32768,   288,  1338,   358,-32768,-32768,-32768,-32768,-32768,-32768,
   282,   284,   285,   341,   291,   293,    68,  1121,-32768,-32768,
   287,   345,-32768,-32768,-32768,-32768,-32768,-32768,  1025,-32768,
   289,   929,   182,   347,-32768,-32768,   295,   292,    26,    26,
    26,    26,    26,    26,    26,    26,    26,    26,-32768,-32768,
-32768,-32768,-32768,    26,    26,-32768,   266,-32768,   286,   182,
-32768,    56,   216,   298,-32768,   309,   825,-32768,   297,-32768,
-32768,-32768,  1169,-32768,-32768,-32768,   299,-32768,   216,-32768,
-32768,-32768,   352,-32768,    56,-32768,-32768,-32768,   286,    29,
-32768,   286,   727,-32768,   181,-32768,   163,   182,   778,   615,
-32768,-32768,   248,   251,   211,   -18,   -18,   159,   159,-32768,
-32768,-32768,   294,   301,-32768,   182,    67,   272,    67,-32768,
-32768,-32768,   369,    41,   182,-32768,   272,   148,   303,  1169,
   305,   311,-32768,   149,-32768,-32768,   356,   216,-32768,-32768,
-32768,   182,-32768,-32768,   182,-32768,-32768,-32768,-32768,   671,
-32768,-32768,-32768,   182,-32768,-32768,   182,   314,   315,   178,
   354,-32768,   322,   388,   325,   372,   182,   324,   347,-32768,
-32768,-32768,   182,-32768,-32768,-32768,-32768,-32768,   173,   182,
  1169,   326,   389,   182,-32768,-32768,-32768,-32768,-32768,   182,
   182,   369,   182,-32768,-32768,   396,    67,   334,-32768,   182,
-32768,   339,-32768,   182,    43,-32768,   -13,   185,   353,-32768,
   182,-32768,   182,-32768,   182,-32768,   153,   186,   189,-32768,
    67,-32768,   182,-32768,    26,   338,   344,   189,-32768,   977,
-32768,   -13,   353,   346,   182,-32768,-32768,   286,-32768,   348,
-32768,   153,   182,-32768,-32768,   182,-32768,-32768,-32768,   417,
   419,-32768
};

static const short yypgoto[] = {-32768,
  -105,    -2,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   175,  -240,   238,-32768,-32768,  -267,    65,    -3,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -103,-32768,-32768,
-32768,    64,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
    22,  -168,-32768,  -186,-32768,   150,   155,   157,    -1,     0,
   -34,-32768,   215,-32768,    -5,-32768,-32768,  -133,  -167,-32768,
    -9,   276,  -234,-32768,-32768,  -119,  -296,  -332,-32768,   428,
     2,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,     7,
   429,    11,   436,-32768,-32768,    -4,-32768,-32768,  -138,     1,
-32768,-32768,-32768,-32768,   -28,-32768,   -27,-32768,    -8,-32768,
-32768,    33,-32768,     5,    20,-32768,-32768,   217,-32768,-32768,
-32768,  -159,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,     3,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -288,
-32768,-32768,-32768,     4,-32768,    39,-32768,-32768,-32768,-32768,
-32768
};


#define	YYLAST		1392


static const short yytable[] = {    62,
    94,   109,   356,    42,    65,   107,    92,    78,   121,    74,
   108,   123,   125,    76,   126,   278,   251,   252,   251,   252,
    42,   223,    79,   320,   363,   255,   227,   255,    48,   369,
   397,   133,   119,   295,   358,   340,   -60,    13,   293,    15,
    16,   399,   153,   194,    82,   193,   122,   296,    48,   370,
   157,   124,    47,    48,   154,   226,   234,   367,    48,   284,
   285,  -287,  -287,   415,   416,   168,   195,    81,   316,    48,
  -287,    83,   417,   141,   128,   143,   244,   145,   320,   148,
    84,   404,   196,   197,   198,   199,   120,   200,   201,    61,
    48,    13,   120,    15,    16,   297,   169,   202,   134,   444,
   390,   -86,   140,   203,   204,   194,   171,   109,   205,    61,
    85,   107,    92,  -287,    61,   144,   108,   177,    13,    61,
    15,    16,   179,    86,    13,   147,    15,    16,   195,   157,
    61,   120,   436,   181,   157,   320,   115,   307,   116,  -287,
    13,  -287,    15,    16,   196,   197,   198,   199,   120,   200,
   201,    61,    13,   150,    15,    16,   -25,    92,   142,   202,
   353,   354,   168,   151,   237,    13,   117,    15,    16,  -287,
   174,   251,   252,   241,   135,    13,   175,    15,    16,   175,
   255,   485,  -287,    48,   127,    42,   320,    49,   260,    50,
   260,   -56,  -287,   169,   376,     5,   465,  -287,   415,   416,
   388,   466,   233,    13,   377,    15,    16,   417,    13,   368,
    15,    16,   374,   175,   402,   407,    56,   132,   232,   232,
   136,   251,   252,   137,   261,    58,   272,   138,   274,   275,
   255,   384,    13,   385,    15,    16,   303,   139,   286,   287,
   288,   126,   146,   433,    61,   434,    42,    42,   172,   173,
   418,   350,   351,   352,   319,   455,   463,   456,   464,   329,
   109,   149,   321,   109,   107,    92,   152,   107,    92,   108,
   299,   155,   108,   156,   301,   282,   283,   322,   474,   157,
   346,   347,   158,   348,   349,   159,   160,   161,   162,   176,
   178,   -17,   186,   182,   -24,   317,   188,   189,   237,   190,
   191,   222,   224,   225,   126,   229,   238,   232,   242,   319,
    42,   335,   243,   245,   273,   246,   276,   321,   279,   302,
   175,   237,   290,   280,   109,   291,   383,   281,   107,    92,
   109,   378,   322,   108,   107,    92,   379,   292,   357,   108,
   294,   380,   300,   260,   306,   381,   313,   328,   310,   336,
   311,   312,   355,   237,   366,   303,   325,   314,     1,   315,
   330,     2,   341,   360,   342,   362,   319,     3,   359,     4,
   364,   396,     5,     6,   321,   403,   386,   405,   391,   151,
   -27,   406,     7,     8,   413,   392,   422,   414,   425,   322,
   426,   427,   370,   260,   393,     9,   430,   437,   446,   438,
    10,    11,   400,   401,    12,   449,   451,   475,    13,    14,
    15,    16,   476,   120,   486,   483,   491,   319,   492,   309,
   408,   394,   395,   409,   266,   321,   308,   428,   343,   289,
    64,    75,   411,   447,   344,   412,   228,   345,    77,   477,
   322,   431,   479,   457,     0,   429,   298,   453,     0,     0,
     0,   432,     0,     0,     0,     0,     0,   472,   435,     0,
   478,   109,   441,     0,     0,   107,    92,   482,   442,   443,
   108,   445,     0,     0,     0,     0,     0,     0,   450,     0,
     0,     0,   452,     0,     0,   454,     0,     0,     0,   459,
     0,   460,     0,   461,     0,   462,     0,     0,     0,     0,
     0,   473,     0,   247,     0,  -251,     0,  -251,  -239,  -251,
   481,  -251,     3,   484,     0,     0,  -251,     5,     6,   262,
   487,   488,  -251,     0,   489,     0,  -251,     0,     8,  -251,
  -251,   248,     0,   263,   264,     0,   249,     0,  -251,  -251,
     9,     0,     0,     0,     0,    10,    11,  -251,  -251,     0,
  -251,  -251,  -251,    13,     0,    15,    16,     0,     0,   247,
     0,  -251,     0,  -251,  -239,  -251,  -251,  -251,     3,     0,
     0,   265,  -251,     5,     6,     0,     0,     0,  -251,     0,
     0,     0,  -251,     0,     8,  -251,  -251,   248,     0,     0,
     0,     0,   249,     0,  -251,  -251,     9,     0,     0,     0,
     0,    10,    11,  -251,  -251,     0,  -251,  -251,  -251,    13,
     0,    15,    16,     0,     0,   247,     0,  -251,     0,  -251,
  -239,  -251,  -251,  -251,     3,     0,     0,   -29,  -251,     5,
     6,     0,     0,     0,  -251,     0,     0,     0,  -251,     0,
     8,  -251,  -251,   248,     0,     0,     0,     0,   249,     0,
  -251,  -251,     9,     0,     0,     0,     0,    10,    11,  -251,
  -251,     0,  -251,  -251,  -251,    13,     0,    15,    16,     0,
     0,   247,     0,  -251,     0,  -251,  -239,  -251,  -251,  -251,
     3,     0,     0,   389,  -251,     5,     6,     0,     0,     0,
  -251,     0,     0,     0,  -251,     0,     8,  -251,  -251,   248,
     0,     0,     0,     0,   249,     0,  -251,  -251,     9,     0,
     0,     0,     0,    10,    11,  -251,  -251,     0,  -251,  -251,
  -251,    13,     0,    15,    16,     0,     0,   331,     0,    48,
     0,    87,     0,    49,  -251,    50,     0,     0,     0,   410,
    51,     5,     0,     0,     0,    88,    53,     0,     0,     0,
    54,     0,     0,    89,    55,     0,     0,     0,     0,     0,
     0,    90,    56,    57,     9,     0,     0,     0,     0,     0,
    11,    58,    91,     0,     0,    59,    60,     0,   331,     0,
    48,     0,    87,     0,    49,     0,    50,     0,     0,     0,
    61,    51,     5,     0,     0,   375,    88,    53,     0,     0,
     0,    54,     0,     0,    89,    55,     0,     0,     0,     0,
     0,     0,    90,    56,    57,     9,     0,     0,     0,     0,
     0,    11,    58,    91,     0,     1,    59,    60,     2,     0,
     0,     0,     0,     0,     3,     0,     4,     0,     0,     5,
     6,    61,     0,     0,     0,     0,   387,   -27,     0,     7,
     8,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     9,     0,     0,     0,     0,    10,    11,     0,
     0,    12,     0,     0,     0,    13,    14,    15,    16,    48,
     0,    87,     0,    49,     0,    50,     0,     0,     0,     0,
    51,     5,     0,   361,     0,    88,    53,     0,     0,     0,
    54,     0,     0,    89,    55,     0,     0,     0,     0,     0,
     0,    90,    56,    57,     9,   168,     0,     0,     0,     0,
    11,    58,    91,     0,     0,    59,    60,     0,     0,   331,
     0,    48,     0,    87,     0,    49,     0,    50,     0,     0,
    61,     0,    51,     5,   -64,     0,   169,    88,    53,     0,
     0,     0,    54,     0,     0,    89,    55,     0,     0,     0,
     0,     0,     0,    90,    56,    57,     9,     0,     0,     0,
     0,     0,    11,    58,    91,     0,     0,    59,    60,    48,
     0,    87,     0,    49,   465,    50,     0,     0,     0,   466,
    51,     5,    61,     0,     0,    88,    53,     0,     0,     0,
    54,     0,     0,    89,    55,     0,     0,     0,     0,     0,
     0,    90,    56,    57,     9,     0,     0,     0,     0,     0,
    11,    58,    91,     0,     0,    59,    60,    48,     0,    87,
     0,    49,     0,    50,     0,     0,     0,     0,    51,     5,
    61,     0,     0,    88,    53,     0,     0,     0,    54,     0,
     0,    89,    55,     0,     0,     0,     0,     0,     0,    90,
    56,    57,     9,     0,     0,     0,     0,     0,    11,    58,
    91,     0,     0,    59,    60,    48,     0,    87,     0,    49,
     0,    50,     0,     0,     0,     0,    51,     0,    61,     0,
     0,    88,    53,     0,     0,     0,    54,     0,     0,    89,
    55,     0,     0,     0,     0,     0,     0,    90,    56,    57,
     0,     0,     0,     0,     0,     0,     0,    58,    91,     0,
     0,    59,    60,    48,     0,    87,     0,    49,     0,    50,
     0,     0,     0,     0,    51,     0,    61,     0,     0,     0,
    53,     0,     0,     0,    54,     0,     0,    89,    55,     0,
     0,     0,     0,     0,     0,     0,    56,    57,     0,     0,
     0,     0,     0,     0,     0,    58,    91,     0,   318,    59,
    60,    48,     0,    87,     0,    49,     0,    50,     0,     0,
     0,     0,    51,     0,    61,     0,     0,     0,    53,     0,
     0,     0,    54,     0,     0,    89,    55,     0,     0,     0,
     0,     0,     0,     0,    56,    57,     0,     0,     0,     0,
     0,     0,     0,    58,    91,     0,     0,    59,    60,    48,
     0,     0,     0,    49,     0,    50,     0,     0,     0,     0,
    51,     0,    61,     0,     0,    52,    53,     0,     0,     0,
    54,     0,     0,     0,    55,     0,     0,    -1,     1,     0,
     0,     2,    56,    57,     0,     0,     0,     3,     0,     4,
     0,    58,     5,     6,     0,    59,    60,     0,     0,     0,
   -27,     0,     7,     8,     0,     0,     0,     0,     0,     0,
    61,     0,     0,     0,     0,     9,     0,     0,     0,     0,
    10,    11,    -2,     1,    12,     0,     2,     0,    13,    14,
    15,    16,     3,     0,     4,     0,     0,     5,     6,     0,
     0,     0,     0,     0,     0,   -27,     0,     7,     8,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     9,     0,     0,     0,     0,    10,    11,     0,     1,    12,
     0,     2,     0,    13,    14,    15,    16,     3,     0,     4,
     0,     0,     5,     6,     0,     0,     0,     0,     0,     0,
   -27,     0,     7,     8,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     9,     0,     0,     0,     0,
    10,    11,     0,     0,    12,     0,     0,     0,    13,    14,
    15,    16
};

static const short yycheck[] = {     3,
    10,    10,   299,     0,     3,    10,    10,     3,    14,     3,
    10,    15,    16,     3,    17,   202,   185,   185,   187,   187,
    17,   155,     3,   258,   313,   185,   160,   187,     3,     1,
   363,     1,     1,    71,   302,   276,    67,    51,   225,    53,
    54,     1,    24,    18,     3,   149,     1,    85,     3,    21,
    64,     1,    47,     3,    36,   159,     1,   325,     3,    78,
    79,    21,    22,    21,    22,    39,    41,    47,     1,     3,
    30,     3,    30,    35,     1,    37,   182,    39,   313,    41,
     3,   370,    57,    58,    59,    60,    61,    62,    63,    64,
     3,    51,    61,    53,    54,   229,    70,    72,    68,   432,
   341,    73,     1,    78,    79,    18,   116,   116,    83,    64,
     3,   116,   116,    73,    64,     1,   116,   123,    51,    64,
    53,    54,    57,     3,    51,     1,    53,    54,    41,    64,
    64,    61,   421,   130,    64,   370,     3,   243,     3,    72,
    51,    68,    53,    54,    57,    58,    59,    60,    61,    62,
    63,    64,    51,    14,    53,    54,    67,   161,     1,    72,
   294,   295,    39,    24,   168,    51,    56,    53,    54,    68,
    55,   340,   340,    55,    23,    51,    61,    53,    54,    61,
   340,   478,    68,     3,    67,   182,   421,     7,   185,     9,
   187,    68,    68,    70,   333,    15,     8,    40,    21,    22,
   339,    13,   164,    51,    24,    53,    54,    30,    51,   329,
    53,    54,   332,    61,    67,    67,    36,    67,    71,    71,
    67,   390,   390,    68,   186,    45,   188,    67,   190,   191,
   390,    69,    51,    71,    53,    54,   240,    67,    80,    81,
    82,   244,    67,    71,    64,    73,   243,   244,    55,    56,
    73,   286,   287,   288,   258,    71,    71,    73,    73,   269,
   269,     3,   258,   272,   269,   269,    84,   272,   272,   269,
   232,    84,   272,     3,   236,    65,    66,   258,   465,    64,
   282,   283,     3,   284,   285,     3,    84,    84,     3,    55,
    55,    67,     3,    68,    67,   257,    68,    40,   302,    68,
    68,    24,     3,    74,   307,    86,    42,    71,    88,   313,
   307,   273,    68,    68,    72,    69,    68,   313,    75,    39,
    61,   325,    62,    76,   333,    85,   335,    77,   333,   333,
   339,   335,   313,   333,   339,   339,   335,    85,   300,   339,
    71,   335,    71,   340,    57,   335,     6,     3,    67,     3,
    67,    67,    87,   357,     3,   359,    70,    67,     1,    67,
    72,     4,    68,    55,    73,    69,   370,    10,    71,    12,
    72,     3,    15,    16,   370,    73,   338,    73,    85,    24,
    23,    71,    25,    26,    71,    85,    33,    73,    67,   370,
     3,    67,    21,   390,   356,    38,    73,    72,     3,    11,
    43,    44,   364,   365,    47,    72,    68,    70,    51,    52,
    53,    54,    69,    61,    67,    70,     0,   421,     0,   245,
   382,   357,   359,   385,   187,   421,    69,   406,   279,   215,
     3,     3,   394,   437,   280,   397,   161,   281,     3,   468,
   421,   409,   470,   449,    -1,   407,   230,   445,    -1,    -1,
    -1,   413,    -1,    -1,    -1,    -1,    -1,   461,   420,    -1,
   470,   470,   424,    -1,    -1,   470,   470,   473,   430,   431,
   470,   433,    -1,    -1,    -1,    -1,    -1,    -1,   440,    -1,
    -1,    -1,   444,    -1,    -1,   447,    -1,    -1,    -1,   451,
    -1,   453,    -1,   455,    -1,   457,    -1,    -1,    -1,    -1,
    -1,   463,    -1,     1,    -1,     3,    -1,     5,     6,     7,
   472,     9,    10,   475,    -1,    -1,    14,    15,    16,    17,
   482,   483,    20,    -1,   486,    -1,    24,    -1,    26,    27,
    28,    29,    -1,    31,    32,    -1,    34,    -1,    36,    37,
    38,    -1,    -1,    -1,    -1,    43,    44,    45,    46,    -1,
    48,    49,    50,    51,    -1,    53,    54,    -1,    -1,     1,
    -1,     3,    -1,     5,     6,     7,    64,     9,    10,    -1,
    -1,    69,    14,    15,    16,    -1,    -1,    -1,    20,    -1,
    -1,    -1,    24,    -1,    26,    27,    28,    29,    -1,    -1,
    -1,    -1,    34,    -1,    36,    37,    38,    -1,    -1,    -1,
    -1,    43,    44,    45,    46,    -1,    48,    49,    50,    51,
    -1,    53,    54,    -1,    -1,     1,    -1,     3,    -1,     5,
     6,     7,    64,     9,    10,    -1,    -1,    69,    14,    15,
    16,    -1,    -1,    -1,    20,    -1,    -1,    -1,    24,    -1,
    26,    27,    28,    29,    -1,    -1,    -1,    -1,    34,    -1,
    36,    37,    38,    -1,    -1,    -1,    -1,    43,    44,    45,
    46,    -1,    48,    49,    50,    51,    -1,    53,    54,    -1,
    -1,     1,    -1,     3,    -1,     5,     6,     7,    64,     9,
    10,    -1,    -1,    69,    14,    15,    16,    -1,    -1,    -1,
    20,    -1,    -1,    -1,    24,    -1,    26,    27,    28,    29,
    -1,    -1,    -1,    -1,    34,    -1,    36,    37,    38,    -1,
    -1,    -1,    -1,    43,    44,    45,    46,    -1,    48,    49,
    50,    51,    -1,    53,    54,    -1,    -1,     1,    -1,     3,
    -1,     5,    -1,     7,    64,     9,    -1,    -1,    -1,    69,
    14,    15,    -1,    -1,    -1,    19,    20,    -1,    -1,    -1,
    24,    -1,    -1,    27,    28,    -1,    -1,    -1,    -1,    -1,
    -1,    35,    36,    37,    38,    -1,    -1,    -1,    -1,    -1,
    44,    45,    46,    -1,    -1,    49,    50,    -1,     1,    -1,
     3,    -1,     5,    -1,     7,    -1,     9,    -1,    -1,    -1,
    64,    14,    15,    -1,    -1,    69,    19,    20,    -1,    -1,
    -1,    24,    -1,    -1,    27,    28,    -1,    -1,    -1,    -1,
    -1,    -1,    35,    36,    37,    38,    -1,    -1,    -1,    -1,
    -1,    44,    45,    46,    -1,     1,    49,    50,     4,    -1,
    -1,    -1,    -1,    -1,    10,    -1,    12,    -1,    -1,    15,
    16,    64,    -1,    -1,    -1,    -1,    69,    23,    -1,    25,
    26,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    38,    -1,    -1,    -1,    -1,    43,    44,    -1,
    -1,    47,    -1,    -1,    -1,    51,    52,    53,    54,     3,
    -1,     5,    -1,     7,    -1,     9,    -1,    -1,    -1,    -1,
    14,    15,    -1,    69,    -1,    19,    20,    -1,    -1,    -1,
    24,    -1,    -1,    27,    28,    -1,    -1,    -1,    -1,    -1,
    -1,    35,    36,    37,    38,    39,    -1,    -1,    -1,    -1,
    44,    45,    46,    -1,    -1,    49,    50,    -1,    -1,     1,
    -1,     3,    -1,     5,    -1,     7,    -1,     9,    -1,    -1,
    64,    -1,    14,    15,    68,    -1,    70,    19,    20,    -1,
    -1,    -1,    24,    -1,    -1,    27,    28,    -1,    -1,    -1,
    -1,    -1,    -1,    35,    36,    37,    38,    -1,    -1,    -1,
    -1,    -1,    44,    45,    46,    -1,    -1,    49,    50,     3,
    -1,     5,    -1,     7,     8,     9,    -1,    -1,    -1,    13,
    14,    15,    64,    -1,    -1,    19,    20,    -1,    -1,    -1,
    24,    -1,    -1,    27,    28,    -1,    -1,    -1,    -1,    -1,
    -1,    35,    36,    37,    38,    -1,    -1,    -1,    -1,    -1,
    44,    45,    46,    -1,    -1,    49,    50,     3,    -1,     5,
    -1,     7,    -1,     9,    -1,    -1,    -1,    -1,    14,    15,
    64,    -1,    -1,    19,    20,    -1,    -1,    -1,    24,    -1,
    -1,    27,    28,    -1,    -1,    -1,    -1,    -1,    -1,    35,
    36,    37,    38,    -1,    -1,    -1,    -1,    -1,    44,    45,
    46,    -1,    -1,    49,    50,     3,    -1,     5,    -1,     7,
    -1,     9,    -1,    -1,    -1,    -1,    14,    -1,    64,    -1,
    -1,    19,    20,    -1,    -1,    -1,    24,    -1,    -1,    27,
    28,    -1,    -1,    -1,    -1,    -1,    -1,    35,    36,    37,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    46,    -1,
    -1,    49,    50,     3,    -1,     5,    -1,     7,    -1,     9,
    -1,    -1,    -1,    -1,    14,    -1,    64,    -1,    -1,    -1,
    20,    -1,    -1,    -1,    24,    -1,    -1,    27,    28,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    36,    37,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
    50,     3,    -1,     5,    -1,     7,    -1,     9,    -1,    -1,
    -1,    -1,    14,    -1,    64,    -1,    -1,    -1,    20,    -1,
    -1,    -1,    24,    -1,    -1,    27,    28,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    36,    37,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    45,    46,    -1,    -1,    49,    50,     3,
    -1,    -1,    -1,     7,    -1,     9,    -1,    -1,    -1,    -1,
    14,    -1,    64,    -1,    -1,    19,    20,    -1,    -1,    -1,
    24,    -1,    -1,    -1,    28,    -1,    -1,     0,     1,    -1,
    -1,     4,    36,    37,    -1,    -1,    -1,    10,    -1,    12,
    -1,    45,    15,    16,    -1,    49,    50,    -1,    -1,    -1,
    23,    -1,    25,    26,    -1,    -1,    -1,    -1,    -1,    -1,
    64,    -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,
    43,    44,     0,     1,    47,    -1,     4,    -1,    51,    52,
    53,    54,    10,    -1,    12,    -1,    -1,    15,    16,    -1,
    -1,    -1,    -1,    -1,    -1,    23,    -1,    25,    26,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    38,    -1,    -1,    -1,    -1,    43,    44,    -1,     1,    47,
    -1,     4,    -1,    51,    52,    53,    54,    10,    -1,    12,
    -1,    -1,    15,    16,    -1,    -1,    -1,    -1,    -1,    -1,
    23,    -1,    25,    26,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,
    43,    44,    -1,    -1,    47,    -1,    -1,    -1,    51,    52,
    53,    54
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/lib/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/lib/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 363 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = 0; ;
    break;}
case 2:
#line 364 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.decl_val = yyvsp[0].decl_val;
      AST::tree()->setDeclarations(yyvsp[0].decl_val);
    ;
    break;}
case 3:
#line 371 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[0].decl_val; ;
    break;}
case 4:
#line 372 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-1].decl_val) { yyvsp[-1].decl_val->append(yyvsp[0].decl_val); yyval.decl_val = yyvsp[-1].decl_val; }
      else yyval.decl_val = yyvsp[0].decl_val;
    ;
    break;}
case 5:
#line 379 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[-1].decl_val; ;
    break;}
case 6:
#line 380 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[-1].const_val; ;
    break;}
case 7:
#line 381 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[-1].exception_val; ;
    break;}
case 8:
#line 382 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[-1].decl_val; ;
    break;}
case 9:
#line 383 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[-1].module_val; ;
    break;}
case 10:
#line 384 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[-1].value_base_val; ;
    break;}
case 11:
#line 385 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = 0; ;
    break;}
case 12:
#line 386 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = 0; ;
    break;}
case 13:
#line 387 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno, "Syntax error in definition");
      yyval.decl_val = 0;
    ;
    break;}
case 14:
#line 394 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-4].module_val->finishConstruction(yyvsp[-1].decl_val);
      yyval.module_val = yyvsp[-4].module_val;
    ;
    break;}
case 15:
#line 398 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in module definition");
    ;
    break;}
case 16:
#line 401 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-5].module_val->finishConstruction(yyvsp[-1].decl_val);
      yyval.module_val = yyvsp[-5].module_val;
    ;
    break;}
case 17:
#line 405 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in module definition (no body found)");
      yyvsp[-1].module_val->finishConstruction(0);
      yyval.module_val = yyvsp[-1].module_val;
    ;
    break;}
case 18:
#line 414 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.module_val = new Module(currentFile, yylineno, mainFile, yyvsp[0].id_val); ;
    break;}
case 19:
#line 418 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[0].interface_val; ;
    break;}
case 20:
#line 419 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[0].forward_val; ;
    break;}
case 21:
#line 423 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-3].interface_val->finishConstruction(yyvsp[-1].decl_val);
      yyval.interface_val = yyvsp[-3].interface_val;
    ;
    break;}
case 22:
#line 427 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in interface definition");
    ;
    break;}
case 23:
#line 430 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-5].interface_val->finishConstruction(yyvsp[-1].decl_val);
      yyval.interface_val = yyvsp[-5].interface_val;
    ;
    break;}
case 24:
#line 434 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in interface definition (no body found)");
      yyvsp[-1].interface_val->finishConstruction(0);
      yyval.interface_val = yyvsp[-1].interface_val;
    ;
    break;}
case 25:
#line 443 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.forward_val = new Forward(currentFile, yylineno, mainFile, yyvsp[0].id_val, yyvsp[-2].boolean_val);
    ;
    break;}
case 26:
#line 450 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.interface_val = new Interface(currentFile, yylineno, mainFile, yyvsp[-2].id_val, yyvsp[-4].boolean_val, yyvsp[0].inheritspec_val);
    ;
    break;}
case 27:
#line 456 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.boolean_val = 0; ;
    break;}
case 28:
#line 457 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.boolean_val = 1; ;
    break;}
case 29:
#line 461 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[0].decl_val; ;
    break;}
case 30:
#line 465 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = 0; ;
    break;}
case 31:
#line 466 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-1].decl_val) { yyvsp[-1].decl_val->append(yyvsp[0].decl_val); yyval.decl_val = yyvsp[-1].decl_val; }
      else yyval.decl_val = yyvsp[0].decl_val;
    ;
    break;}
case 32:
#line 473 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[-1].decl_val; ;
    break;}
case 33:
#line 474 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[-1].const_val; ;
    break;}
case 34:
#line 475 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[-1].exception_val; ;
    break;}
case 35:
#line 476 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[-1].attribute_val; ;
    break;}
case 36:
#line 477 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[-1].operation_val; ;
    break;}
case 37:
#line 478 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = 0; ;
    break;}
case 38:
#line 479 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno, "Syntax error in interface body");
      yyval.decl_val = 0;
    ;
    break;}
case 39:
#line 486 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.inheritspec_val = 0; ;
    break;}
case 40:
#line 487 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.inheritspec_val = yyvsp[0].inheritspec_val; ;
    break;}
case 41:
#line 491 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.inheritspec_val = yyvsp[0].inheritspec_val; ;
    break;}
case 42:
#line 495 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.inheritspec_val = new InheritSpec(yyvsp[-1].scopedname_val, currentFile, yylineno);
    ;
    break;}
case 43:
#line 498 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-4].inheritspec_val) {
	yyvsp[-4].inheritspec_val->append(new InheritSpec(yyvsp[-1].scopedname_val, currentFile, yylineno),
		   currentFile, yylineno);
	yyval.inheritspec_val = yyvsp[-4].inheritspec_val;
      }
      else yyval.inheritspec_val = new InheritSpec(yyvsp[-1].scopedname_val, currentFile, yylineno);
    ;
    break;}
case 44:
#line 506 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in inheritance list");
      yyval.inheritspec_val = 0;
    ;
    break;}
case 45:
#line 514 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.scopedname_val = yyvsp[0].scopedname_val; ;
    break;}
case 46:
#line 518 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.scopedname_val = new ScopedName(yyvsp[0].id_val, 0);
    ;
    break;}
case 47:
#line 521 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.scopedname_val = new ScopedName(yyvsp[0].id_val, 1);
    ;
    break;}
case 48:
#line 524 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-2].scopedname_val->append(yyvsp[0].id_val);
      yyval.scopedname_val=yyvsp[-2].scopedname_val;
    ;
    break;}
case 49:
#line 535 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.value_base_val = yyvsp[0].value_val; ;
    break;}
case 50:
#line 536 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.value_base_val = yyvsp[0].value_abs_val; ;
    break;}
case 51:
#line 537 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.value_base_val = yyvsp[0].value_box_val; ;
    break;}
case 52:
#line 538 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.value_base_val = yyvsp[0].value_forward_val; ;
    break;}
case 53:
#line 542 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.value_forward_val = new ValueForward(currentFile, yylineno, mainFile, 0, yyvsp[0].id_val);
    ;
    break;}
case 54:
#line 545 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.value_forward_val = new ValueForward(currentFile, yylineno, mainFile, 1, yyvsp[0].id_val);
    ;
    break;}
case 55:
#line 551 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.value_box_val = new ValueBox(currentFile, yylineno, mainFile,
			yyvsp[-1].id_val, yyvsp[0].type_spec_val->type(), yyvsp[0].type_spec_val->constr());
      delete yyvsp[0].type_spec_val;
    ;
    break;}
case 56:
#line 559 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      valueabs_hack = new ValueAbs(currentFile, yylineno, mainFile, yyvsp[0].id_val, 0, 0);
    ;
    break;}
case 57:
#line 561 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      valueabs_hack->finishConstruction(yyvsp[-1].decl_val);
      yyval.value_abs_val = valueabs_hack;
      valueabs_hack = 0;
    ;
    break;}
case 58:
#line 566 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      valueabs_hack = new ValueAbs(currentFile, yylineno, mainFile, yyvsp[-1].id_val,
				   yyvsp[0].valueinheritsupportspec_val->inherits(), yyvsp[0].valueinheritsupportspec_val->supports());
      delete yyvsp[0].valueinheritsupportspec_val;
    ;
    break;}
case 59:
#line 570 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      valueabs_hack->finishConstruction(yyvsp[-1].decl_val);
      yyval.value_abs_val = valueabs_hack;
      valueabs_hack = 0;
    ;
    break;}
case 60:
#line 575 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in abstract valuetype");
      if (valueabs_hack) {
	valueabs_hack->finishConstruction(0);
	yyval.value_abs_val = valueabs_hack;
	valueabs_hack = 0;
      }
      else yyval.value_abs_val = 0;
    ;
    break;}
case 61:
#line 588 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-3].value_val->finishConstruction(yyvsp[-1].decl_val);
      yyval.value_val = yyvsp[-3].value_val;
    ;
    break;}
case 62:
#line 595 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.value_val = new Value(currentFile, yylineno, mainFile, 0, yyvsp[-1].id_val,
		     yyvsp[0].valueinheritsupportspec_val->inherits(), yyvsp[0].valueinheritsupportspec_val->supports());
      delete yyvsp[0].valueinheritsupportspec_val;
    ;
    break;}
case 63:
#line 600 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.value_val = new Value(currentFile, yylineno, mainFile, 1, yyvsp[-1].id_val,
		     yyvsp[0].valueinheritsupportspec_val->inherits(), yyvsp[0].valueinheritsupportspec_val->supports());
      delete yyvsp[0].valueinheritsupportspec_val;
    ;
    break;}
case 64:
#line 605 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.value_val = new Value(currentFile, yylineno, mainFile, 0, yyvsp[0].id_val, 0, 0);
    ;
    break;}
case 65:
#line 608 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.value_val = new Value(currentFile, yylineno, mainFile, 1, yyvsp[0].id_val, 0, 0);
    ;
    break;}
case 66:
#line 614 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.valueinheritsupportspec_val = new ValueInheritSupportSpec(yyvsp[-2].valueinheritspec_val, yyvsp[0].inheritspec_val);
    ;
    break;}
case 67:
#line 617 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.valueinheritsupportspec_val = new ValueInheritSupportSpec(yyvsp[0].valueinheritspec_val, 0);
    ;
    break;}
case 68:
#line 620 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.valueinheritsupportspec_val = new ValueInheritSupportSpec(0, yyvsp[0].inheritspec_val);
    ;
    break;}
case 69:
#line 626 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-1].boolean_val) yyvsp[0].valueinheritspec_val->setTruncatable();
      yyval.valueinheritspec_val = yyvsp[0].valueinheritspec_val;
    ;
    break;}
case 70:
#line 633 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.boolean_val = 0; ;
    break;}
case 71:
#line 634 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.boolean_val = 1; ;
    break;}
case 72:
#line 638 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.valueinheritspec_val = new ValueInheritSpec(yyvsp[0].scopedname_val, currentFile, yylineno);
    ;
    break;}
case 73:
#line 641 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-2].valueinheritspec_val) {
	yyvsp[-2].valueinheritspec_val->append(new ValueInheritSpec(yyvsp[0].scopedname_val, currentFile, yylineno),
		   currentFile, yylineno);
	yyval.valueinheritspec_val = yyvsp[-2].valueinheritspec_val;
      }
      else yyval.valueinheritspec_val = new ValueInheritSpec(yyvsp[0].scopedname_val, currentFile, yylineno);
    ;
    break;}
case 74:
#line 652 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.scopedname_val = yyvsp[0].scopedname_val; ;
    break;}
case 75:
#line 656 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = 0; ;
    break;}
case 76:
#line 657 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-1].decl_val) { yyvsp[-1].decl_val->append(yyvsp[0].decl_val); yyval.decl_val = yyvsp[-1].decl_val; }
      else yyval.decl_val = yyvsp[0].decl_val;
    ;
    break;}
case 77:
#line 664 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[0].decl_val; ;
    break;}
case 78:
#line 665 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[0].statemember_val; ;
    break;}
case 79:
#line 666 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[0].factory_val; ;
    break;}
case 80:
#line 670 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.statemember_val = new StateMember(currentFile, yylineno, mainFile,
			   yyvsp[-3].ulong_val, yyvsp[-2].type_spec_val->type(), yyvsp[-2].type_spec_val->constr(), yyvsp[-1].declarator_val);
      delete yyvsp[-2].type_spec_val;
    ;
    break;}
case 81:
#line 678 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.ulong_val = 0; ;
    break;}
case 82:
#line 679 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.ulong_val = 1; ;
    break;}
case 83:
#line 683 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-4].factory_val->finishConstruction(yyvsp[-2].parameter_val);
      yyval.factory_val = yyvsp[-4].factory_val;
    ;
    break;}
case 84:
#line 687 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in factory parameters");
      yyvsp[-4].factory_val->finishConstruction(0);
      yyval.factory_val = yyvsp[-4].factory_val;
    ;
    break;}
case 85:
#line 696 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.factory_val = new Factory(currentFile, yylineno, mainFile, yyvsp[0].id_val);
    ;
    break;}
case 86:
#line 702 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.parameter_val = 0; ;
    break;}
case 87:
#line 703 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.parameter_val = yyvsp[0].parameter_val; ;
    break;}
case 88:
#line 707 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.parameter_val = yyvsp[0].parameter_val; ;
    break;}
case 89:
#line 708 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-2].parameter_val) { yyvsp[-2].parameter_val->append(yyvsp[0].parameter_val); yyval.parameter_val = yyvsp[-2].parameter_val; }
      else yyval.parameter_val = yyvsp[0].parameter_val;
    ;
    break;}
case 90:
#line 715 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.parameter_val = new Parameter(currentFile, yylineno, mainFile, 0, yyvsp[-1].type_val, yyvsp[0].id_val);
    ;
    break;}
case 91:
#line 723 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.const_val = new Const(currentFile, yylineno, mainFile, yyvsp[-3].type_val, yyvsp[-2].id_val, yyvsp[0].expr_val);
    ;
    break;}
case 92:
#line 729 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 93:
#line 730 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 94:
#line 731 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 95:
#line 732 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 96:
#line 733 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 97:
#line 734 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 98:
#line 735 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 99:
#line 736 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 100:
#line 737 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.type_val = IdlType::scopedNameToType(currentFile, yylineno, yyvsp[0].scopedname_val);
    ;
    break;}
case 101:
#line 740 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 102:
#line 744 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = yyvsp[0].expr_val; ;
    break;}
case 103:
#line 748 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = yyvsp[0].expr_val; ;
    break;}
case 104:
#line 749 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = new OrExpr(currentFile, yylineno, yyvsp[-2].expr_val, yyvsp[0].expr_val); ;
    break;}
case 105:
#line 753 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = yyvsp[0].expr_val; ;
    break;}
case 106:
#line 754 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = new XorExpr(currentFile, yylineno, yyvsp[-2].expr_val, yyvsp[0].expr_val); ;
    break;}
case 107:
#line 758 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = yyvsp[0].expr_val; ;
    break;}
case 108:
#line 759 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new AndExpr(currentFile, yylineno, yyvsp[-2].expr_val, yyvsp[0].expr_val);
    ;
    break;}
case 109:
#line 765 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = yyvsp[0].expr_val; ;
    break;}
case 110:
#line 766 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
    yyval.expr_val = new RShiftExpr(currentFile, yylineno, yyvsp[-2].expr_val, yyvsp[0].expr_val);
  ;
    break;}
case 111:
#line 769 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
    yyval.expr_val = new LShiftExpr(currentFile, yylineno, yyvsp[-2].expr_val, yyvsp[0].expr_val);
  ;
    break;}
case 112:
#line 775 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = yyvsp[0].expr_val; ;
    break;}
case 113:
#line 776 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = new AddExpr(currentFile, yylineno, yyvsp[-2].expr_val, yyvsp[0].expr_val); ;
    break;}
case 114:
#line 777 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = new SubExpr(currentFile, yylineno, yyvsp[-2].expr_val, yyvsp[0].expr_val); ;
    break;}
case 115:
#line 781 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = yyvsp[0].expr_val; ;
    break;}
case 116:
#line 782 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new MultExpr(currentFile, yylineno, yyvsp[-2].expr_val, yyvsp[0].expr_val);
    ;
    break;}
case 117:
#line 785 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new DivExpr(currentFile, yylineno, yyvsp[-2].expr_val, yyvsp[0].expr_val);
    ;
    break;}
case 118:
#line 788 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new ModExpr(currentFile, yylineno, yyvsp[-2].expr_val, yyvsp[0].expr_val);
    ;
    break;}
case 119:
#line 794 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-1].char_val == '-') yyval.expr_val = new MinusExpr(currentFile, yylineno, yyvsp[0].expr_val);
      if (yyvsp[-1].char_val == '+') yyval.expr_val = new PlusExpr(currentFile, yylineno, yyvsp[0].expr_val);
      if (yyvsp[-1].char_val == '~') yyval.expr_val = new InvertExpr(currentFile, yylineno, yyvsp[0].expr_val);
    ;
    break;}
case 120:
#line 799 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = yyvsp[0].expr_val; ;
    break;}
case 121:
#line 803 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.char_val = '-'; ;
    break;}
case 122:
#line 804 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.char_val = '+'; ;
    break;}
case 123:
#line 805 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.char_val = '~'; ;
    break;}
case 124:
#line 809 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = IdlExpr::scopedNameToExpr(currentFile, yylineno, yyvsp[0].scopedname_val);
    ;
    break;}
case 125:
#line 812 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = yyvsp[0].expr_val; ;
    break;}
case 126:
#line 813 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = yyvsp[-1].expr_val; ;
    break;}
case 127:
#line 817 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new IntegerExpr(currentFile, yylineno, yyvsp[0].int_literal_val);
    ;
    break;}
case 128:
#line 820 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new StringExpr(currentFile, yylineno, yyvsp[0].string_val);
    ;
    break;}
case 129:
#line 823 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new WStringExpr(currentFile, yylineno, yyvsp[0].wstring_val);
    ;
    break;}
case 130:
#line 826 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new CharExpr(currentFile, yylineno, yyvsp[0].char_val);
    ;
    break;}
case 131:
#line 829 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new WCharExpr(currentFile, yylineno, yyvsp[0].wchar_val);
    ;
    break;}
case 132:
#line 832 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new FixedExpr(currentFile, yylineno, yyvsp[0].fixed_val);
    ;
    break;}
case 133:
#line 835 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new FloatExpr(currentFile, yylineno, yyvsp[0].float_literal_val);
    ;
    break;}
case 134:
#line 838 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new BooleanExpr(currentFile, yylineno, yyvsp[0].boolean_val);
    ;
    break;}
case 135:
#line 844 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.string_val = yyvsp[0].string_val; ;
    break;}
case 136:
#line 845 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.string_val = new char [strlen(yyvsp[-1].string_val) + strlen(yyvsp[0].string_val) + 1];
      strcpy(yyval.string_val, yyvsp[-1].string_val);
      strcat(yyval.string_val, yyvsp[0].string_val);
      delete [] yyvsp[-1].string_val;
      delete [] yyvsp[0].string_val;
    ;
    break;}
case 137:
#line 855 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.wstring_val = yyvsp[0].wstring_val; ;
    break;}
case 138:
#line 856 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.wstring_val = new _CORBA_WChar [idl_wstrlen(yyvsp[-1].wstring_val) + idl_wstrlen(yyvsp[0].wstring_val) + 1];
      idl_wstrcpy(yyval.wstring_val, yyvsp[-1].wstring_val);
      idl_wstrcat(yyval.wstring_val, yyvsp[0].wstring_val);
      delete [] yyvsp[-1].wstring_val;
      delete [] yyvsp[0].wstring_val;
    ;
    break;}
case 139:
#line 866 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.boolean_val = 1; ;
    break;}
case 140:
#line 867 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.boolean_val = 0; ;
    break;}
case 141:
#line 871 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.ulong_val = yyvsp[0].expr_val->evalAsULong();
      if (yyval.ulong_val < 1)
	IdlError(currentFile, yylineno, "Size must be at least 1");
    ;
    break;}
case 142:
#line 879 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[0].typedef_val; ;
    break;}
case 143:
#line 880 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[0].struct_val; ;
    break;}
case 144:
#line 881 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[0].union_val; ;
    break;}
case 145:
#line 882 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[0].enum_val; ;
    break;}
case 146:
#line 883 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.decl_val = new Native(currentFile, yylineno, mainFile, yyvsp[0].id_val);
    ;
    break;}
case 147:
#line 889 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.typedef_val = new Typedef(currentFile, yylineno, mainFile,
		       yyvsp[-1].type_spec_val->type(), yyvsp[-1].type_spec_val->constr(), yyvsp[0].declarator_val);
      delete yyvsp[-1].type_spec_val;
    ;
    break;}
case 148:
#line 897 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_spec_val = new TypeSpec(yyvsp[0].type_val, 0); ;
    break;}
case 149:
#line 898 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_spec_val = new TypeSpec(yyvsp[0].type_val, 1); ;
    break;}
case 150:
#line 902 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 151:
#line 903 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 152:
#line 904 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.type_val = IdlType::scopedNameToType(currentFile, yylineno, yyvsp[0].scopedname_val);
    ;
    break;}
case 153:
#line 910 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 154:
#line 911 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 155:
#line 912 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 156:
#line 913 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 157:
#line 914 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 158:
#line 915 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 159:
#line 916 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 160:
#line 917 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 161:
#line 918 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 162:
#line 922 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 163:
#line 923 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 164:
#line 924 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 165:
#line 925 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 166:
#line 929 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].struct_val->thisType(); ;
    break;}
case 167:
#line 930 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].union_val->thisType(); ;
    break;}
case 168:
#line 931 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].enum_val->thisType(); ;
    break;}
case 169:
#line 935 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.declarator_val = yyvsp[-1].declarator_val; ;
    break;}
case 170:
#line 936 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-4].declarator_val) { yyvsp[-4].declarator_val->append(yyvsp[-1].declarator_val); yyval.declarator_val = yyvsp[-4].declarator_val; }
      else yyval.declarator_val = yyvsp[-1].declarator_val;
    ;
    break;}
case 171:
#line 943 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.declarator_val = yyvsp[0].declarator_val; ;
    break;}
case 172:
#line 944 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.declarator_val = yyvsp[0].declarator_val; ;
    break;}
case 173:
#line 948 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.declarator_val = new Declarator(currentFile, yylineno, mainFile, yyvsp[0].id_val, 0);
    ;
    break;}
case 174:
#line 954 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.declarator_val = yyvsp[0].declarator_val; ;
    break;}
case 175:
#line 958 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::floatType; ;
    break;}
case 176:
#line 959 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::doubleType; ;
    break;}
case 177:
#line 960 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::longdoubleType; ;
    break;}
case 178:
#line 964 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 179:
#line 965 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 180:
#line 969 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 181:
#line 970 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 182:
#line 971 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 183:
#line 975 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::shortType; ;
    break;}
case 184:
#line 979 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::longType; ;
    break;}
case 185:
#line 983 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::longlongType; ;
    break;}
case 186:
#line 987 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 187:
#line 988 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 188:
#line 989 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 189:
#line 993 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::ushortType; ;
    break;}
case 190:
#line 997 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::ulongType; ;
    break;}
case 191:
#line 1001 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::ulonglongType; ;
    break;}
case 192:
#line 1005 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::charType; ;
    break;}
case 193:
#line 1009 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::wcharType; ;
    break;}
case 194:
#line 1013 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::booleanType; ;
    break;}
case 195:
#line 1017 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::octetType; ;
    break;}
case 196:
#line 1021 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::anyType; ;
    break;}
case 197:
#line 1025 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = DeclaredType::corbaObjectType; ;
    break;}
case 198:
#line 1029 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-5].struct_val->finishConstruction(yyvsp[-1].member_val);
      yyval.struct_val = yyvsp[-5].struct_val;
    ;
    break;}
case 199:
#line 1033 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in struct definition");
      yyvsp[-1].struct_val->finishConstruction(0);
      yyval.struct_val = yyvsp[-1].struct_val;
    ;
    break;}
case 200:
#line 1042 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.struct_val = new Struct(currentFile, yylineno, mainFile, yyvsp[0].id_val);
    ;
    break;}
case 201:
#line 1048 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.member_val = yyvsp[0].member_val; ;
    break;}
case 202:
#line 1049 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-1].member_val) { yyvsp[-1].member_val->append(yyvsp[0].member_val); yyval.member_val = yyvsp[-1].member_val; }
      else yyval.member_val = yyvsp[0].member_val;
    ;
    break;}
case 203:
#line 1056 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.member_val = new Member(currentFile, yylineno, mainFile,
		      yyvsp[-3].type_spec_val->type(), yyvsp[-3].type_spec_val->constr(), yyvsp[-2].declarator_val);
      delete yyvsp[-3].type_spec_val;
    ;
    break;}
case 204:
#line 1061 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in member declaration");
      yyval.member_val = 0;
    ;
    break;}
case 205:
#line 1071 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{

      yyvsp[-12].union_val->finishConstruction(yyvsp[-7].type_spec_val->type(), yyvsp[-7].type_spec_val->constr(), yyvsp[-1].union_case_val);
      delete yyvsp[-7].type_spec_val;
      yyval.union_val = yyvsp[-12].union_val;
    ;
    break;}
case 206:
#line 1077 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in union declaration");
      yyvsp[-1].union_val->finishConstruction(0, 0, 0);
      yyval.union_val = yyvsp[-1].union_val;
    ;
    break;}
case 207:
#line 1086 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.union_val = new Union(currentFile, yylineno, mainFile, yyvsp[0].id_val);
    ;
    break;}
case 208:
#line 1092 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_spec_val = new TypeSpec(yyvsp[0].type_val, 0); ;
    break;}
case 209:
#line 1093 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_spec_val = new TypeSpec(yyvsp[0].type_val, 0); ;
    break;}
case 210:
#line 1094 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_spec_val = new TypeSpec(yyvsp[0].type_val, 0); ;
    break;}
case 211:
#line 1095 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_spec_val = new TypeSpec(yyvsp[0].enum_val->thisType(), 1); ;
    break;}
case 212:
#line 1096 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.type_spec_val = new TypeSpec(IdlType::scopedNameToType(currentFile, yylineno, yyvsp[0].scopedname_val),
			0);
    ;
    break;}
case 213:
#line 1103 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.union_case_val = yyvsp[0].union_case_val; ;
    break;}
case 214:
#line 1107 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.union_case_val = yyvsp[0].union_case_val; ;
    break;}
case 215:
#line 1108 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-1].union_case_val->append(yyvsp[0].union_case_val);
      yyval.union_case_val = yyvsp[-1].union_case_val;
    ;
    break;}
case 216:
#line 1115 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-2].union_case_val->finishConstruction(yyvsp[-3].case_label_val);
      yyval.union_case_val = yyvsp[-2].union_case_val;
    ;
    break;}
case 217:
#line 1122 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.case_label_val = yyvsp[0].case_label_val; ;
    break;}
case 218:
#line 1123 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-1].case_label_val->append(yyvsp[0].case_label_val);
      yyval.case_label_val = yyvsp[-1].case_label_val;
    ;
    break;}
case 219:
#line 1130 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.case_label_val = new CaseLabel(currentFile, yylineno, mainFile, yyvsp[-2].expr_val);
    ;
    break;}
case 220:
#line 1133 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.case_label_val = new CaseLabel(currentFile, yylineno, mainFile, 0);
    ;
    break;}
case 221:
#line 1139 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.union_case_val = new UnionCase(currentFile, yylineno, mainFile,
			 yyvsp[-1].type_spec_val->type(), yyvsp[-1].type_spec_val->constr(), yyvsp[0].declarator_val);
    ;
    break;}
case 222:
#line 1146 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-5].enum_val->finishConstruction(yyvsp[-1].enumerator_val);
      yyval.enum_val = yyvsp[-5].enum_val;
    ;
    break;}
case 223:
#line 1150 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno, "Syntax error in enum definition");
      yyvsp[-1].enum_val->finishConstruction(0);
      yyval.enum_val = yyvsp[-1].enum_val;
    ;
    break;}
case 224:
#line 1158 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.enum_val = new Enum(currentFile, yylineno, mainFile, yyvsp[0].id_val);
    ;
    break;}
case 225:
#line 1164 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.enumerator_val = yyvsp[-1].enumerator_val; ;
    break;}
case 226:
#line 1165 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-4].enumerator_val->append(yyvsp[-1].enumerator_val);
      yyval.enumerator_val = yyvsp[-4].enumerator_val;
    ;
    break;}
case 227:
#line 1172 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.enumerator_val = new Enumerator(currentFile, yylineno, mainFile, yyvsp[0].id_val);
    ;
    break;}
case 228:
#line 1178 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.type_val = new SequenceType(yyvsp[-3].type_val, yyvsp[-1].ulong_val);
    ;
    break;}
case 229:
#line 1181 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.type_val = new SequenceType(yyvsp[-1].type_val, 0);
    ;
    break;}
case 230:
#line 1187 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = new StringType(yyvsp[-1].ulong_val); ;
    break;}
case 231:
#line 1188 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.type_val = StringType::unboundedStringType;
    ;
    break;}
case 232:
#line 1194 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = new WStringType(yyvsp[-1].ulong_val); ;
    break;}
case 233:
#line 1195 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.type_val = WStringType::unboundedWStringType;
    ;
    break;}
case 234:
#line 1201 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.declarator_val = new Declarator(currentFile, yylineno, mainFile, yyvsp[-1].id_val, yyvsp[0].array_size_val);
    ;
    break;}
case 235:
#line 1207 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.array_size_val = yyvsp[0].array_size_val; ;
    break;}
case 236:
#line 1208 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-1].array_size_val->append(yyvsp[0].array_size_val);
      yyval.array_size_val = yyvsp[-1].array_size_val;
    ;
    break;}
case 237:
#line 1215 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.array_size_val = new ArraySize(yyvsp[-1].ulong_val); ;
    break;}
case 238:
#line 1219 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.attribute_val = new Attribute(currentFile, yylineno, mainFile, yyvsp[-3].boolean_val, yyvsp[-1].type_val, yyvsp[0].declarator_val);
    ;
    break;}
case 239:
#line 1225 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.boolean_val = 0; ;
    break;}
case 240:
#line 1226 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.boolean_val = 1; ;
    break;}
case 241:
#line 1230 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.declarator_val = yyvsp[-1].declarator_val; ;
    break;}
case 242:
#line 1231 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-4].declarator_val) { yyvsp[-4].declarator_val->append(yyvsp[-1].declarator_val); yyval.declarator_val = yyvsp[-4].declarator_val; }
      else yyval.declarator_val = yyvsp[-1].declarator_val;
    ;
    break;}
case 243:
#line 1238 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-5].exception_val->finishConstruction(yyvsp[-1].member_val);
      yyval.exception_val = yyvsp[-5].exception_val;
    ;
    break;}
case 244:
#line 1242 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in exception definition");
      yyvsp[-1].exception_val->finishConstruction(0);
      yyval.exception_val = yyvsp[-1].exception_val;
    ;
    break;}
case 245:
#line 1251 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.exception_val = new Exception(currentFile, yylineno, mainFile, yyvsp[0].id_val);
    ;
    break;}
case 246:
#line 1257 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.member_val = 0; ;
    break;}
case 247:
#line 1258 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-1].member_val) { yyvsp[-1].member_val->append(yyvsp[0].member_val);	yyval.member_val = yyvsp[-1].member_val; }
      else yyval.member_val = yyvsp[0].member_val;
    ;
    break;}
case 248:
#line 1266 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-5].operation_val->finishConstruction(yyvsp[-3].parameter_val, yyvsp[-1].raisesspec_val, yyvsp[0].contextspec_val);
      yyval.operation_val = yyvsp[-5].operation_val;
    ;
    break;}
case 249:
#line 1270 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in operation declaration");
      yyvsp[-1].operation_val->finishConstruction(0, 0, 0);
      yyval.operation_val = yyvsp[-1].operation_val;
    ;
    break;}
case 250:
#line 1279 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.operation_val = new Operation(currentFile, yylineno, mainFile, yyvsp[-2].boolean_val, yyvsp[-1].type_val, yyvsp[0].id_val);
    ;
    break;}
case 251:
#line 1285 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.boolean_val = 0; ;
    break;}
case 252:
#line 1286 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.boolean_val = yyvsp[0].boolean_val; ;
    break;}
case 253:
#line 1290 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.boolean_val = 1; ;
    break;}
case 254:
#line 1294 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 255:
#line 1295 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::voidType; ;
    break;}
case 256:
#line 1299 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.parameter_val = yyvsp[-1].parameter_val; ;
    break;}
case 257:
#line 1300 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.parameter_val = 0; ;
    break;}
case 258:
#line 1301 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in operation parameters");
      yyval.parameter_val = 0;
    ;
    break;}
case 259:
#line 1309 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.parameter_val = yyvsp[-1].parameter_val; ;
    break;}
case 260:
#line 1310 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-4].parameter_val) { yyvsp[-4].parameter_val->append(yyvsp[-1].parameter_val); yyval.parameter_val = yyvsp[-4].parameter_val; }
      else yyval.parameter_val = yyvsp[-1].parameter_val;
    ;
    break;}
case 261:
#line 1317 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.parameter_val = new Parameter(currentFile, yylineno, mainFile, yyvsp[-2].int_val, yyvsp[-1].type_val, yyvsp[0].id_val);
    ;
    break;}
case 262:
#line 1323 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.int_val = 0; ;
    break;}
case 263:
#line 1324 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.int_val = 1; ;
    break;}
case 264:
#line 1325 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.int_val = 2; ;
    break;}
case 265:
#line 1329 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.raisesspec_val = 0; ;
    break;}
case 266:
#line 1330 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.raisesspec_val = yyvsp[-1].raisesspec_val; ;
    break;}
case 267:
#line 1334 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.raisesspec_val = yyvsp[-1].raisesspec_val; ;
    break;}
case 268:
#line 1338 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.raisesspec_val = new RaisesSpec(yyvsp[-1].scopedname_val, currentFile, yylineno);
    ;
    break;}
case 269:
#line 1341 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-4].raisesspec_val->append(new RaisesSpec(yyvsp[-1].scopedname_val, currentFile, yylineno));
      yyval.raisesspec_val = yyvsp[-4].raisesspec_val;
    ;
    break;}
case 270:
#line 1348 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.contextspec_val = 0; ;
    break;}
case 271:
#line 1349 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.contextspec_val = yyvsp[-1].contextspec_val; ;
    break;}
case 272:
#line 1353 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.contextspec_val = yyvsp[-1].contextspec_val; ;
    break;}
case 273:
#line 1357 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.contextspec_val = new ContextSpec(yyvsp[-1].string_val, currentFile, yylineno);
    ;
    break;}
case 274:
#line 1360 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-4].contextspec_val->append(new ContextSpec(yyvsp[-1].string_val, currentFile, yylineno));
      yyval.contextspec_val = yyvsp[-4].contextspec_val;
    ;
    break;}
case 275:
#line 1367 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 276:
#line 1368 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 277:
#line 1369 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 278:
#line 1370 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.type_val = IdlType::scopedNameToType(currentFile, yylineno, yyvsp[0].scopedname_val);
    ;
    break;}
case 279:
#line 1376 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      IdlError(currentFile, yylineno, "Fixed is not supported yet");
      yyval.type_val = 0;
    ;
    break;}
case 280:
#line 1383 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      IdlError(currentFile, yylineno, "Fixed is not supported yet");
      yyval.type_val = 0;
    ;
    break;}
case 281:
#line 1390 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = new DeclaredType(IdlType::tk_value, 0, 0); ;
    break;}
case 289:
#line 1410 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      Prefix::setPrefix(idl_strdup(yyvsp[-1].string_val));
    ;
    break;}
case 290:
#line 1413 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno, "Malformed #pragma prefix");
    ;
    break;}
case 291:
#line 1419 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      Decl* d = Decl::scopedNameToDecl(currentFile, yylineno, yyvsp[-2].scopedname_val);
      if (d) DeclRepoId::setRepoId(d, yyvsp[-1].string_val, currentFile, yylineno);
    ;
    break;}
case 292:
#line 1423 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno, "Malformed #pragma id");
    ;
    break;}
case 293:
#line 1429 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      Decl* d = Decl::scopedNameToDecl(currentFile, yylineno, yyvsp[-4].scopedname_val);
      if (d) DeclRepoId::setVersion(d, yyvsp[-3].int_literal_val, yyvsp[-1].int_literal_val, currentFile, yylineno);
    ;
    break;}
case 294:
#line 1433 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno, "Malformed #pragma version");
    ;
    break;}
case 295:
#line 1439 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      Pragma::add(yyvsp[-1].string_val);
    ;
    break;}
case 296:
#line 1445 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{ yyval.string_val = yyvsp[0].string_val; ;
    break;}
case 297:
#line 1446 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"
{
      yyval.string_val = new char [strlen(yyvsp[-1].string_val) + strlen(yyvsp[0].string_val) + 1];
      strcpy(yyval.string_val, yyvsp[-1].string_val);
      strcat(yyval.string_val, yyvsp[0].string_val);
      delete [] yyvsp[-1].string_val;
      delete [] yyvsp[0].string_val;
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/lib/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 1455 "/home/dpg1/omni/cvs/ins/omni/src/tool/omniidl/cxx/idl.yy"

