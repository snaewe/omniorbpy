<?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?>
<?xml-stylesheet type="text/xsl" href="bugfixes.xsl"?>

<!-- The following bugs have been fixed since the omniORBpy 1.2     -->
<!-- release. This file is transformed into html with bugfixes.xsl. -->

<!-- Editors: make sure the content you add is well-formed XML.     -->

<buglist version="1.2">

<bug id="7" date="Thu Jan 18 11:45:43 GMT 2001" user="dpg1">

  <summary>Crash when marshalling CORBA::Object TypeCode</summary>
  <reported>Lars von Wedel</reported>
  <link
  href="http://www.uk.research.att.com/omniORB/archives/2001-01/0125.html"/>
  <text>
  The TypeCode marshaller would calculate the correct size for a base
  CORBA::Object TypeCode, but then marshal it incorrectly, leading to
  an error from an omniORB sanity check.
  </text>
</bug>

<bug id="6" date="Mon Dec  4 17:56:07 GMT 2000" user="dpg1">

  <summary>BAD_TYPECODE exception with good TypeCode</summary>
  <reported>Harri Pasanen</reported>
  <link
  href="http://www.uk.research.att.com/omniORB/archives/2000-12/0001.html"/>
  <text>
  The TypeCode unmarshalling code would fail to record offsets within
  TypeCodes it already knew, so indirections to them would fail.
  </text>
</bug>

<bug id="5" date="Wed Nov 29 17:01:06 GMT 2000" user="dpg1">

  <summary>Deadlock with concurrent calls to _this()</summary>
  <reported>Mike Olson</reported>
  <link href="http://www.uk.research.att.com/omniORB/archives/2000-11/0203.html"/>
  <text>
  In various circumstances, omniORBpy could deadlock due to holding an
  omniORB internal lock at inappropriate times. This bug was provoked
  by the fix to <a href="bugfixes11.html#bug6">bug 6</a> in omniORBpy
  1.1.
  </text>
</bug>

<bug id="4" date="Tue Nov 21 10:46:54 GMT 2000" user="dpg1">

  <summary>Segfault in string_to_object</summary>
  <reported>Nick Belshaw</reported>
  <text>
  string_to_object would segfault if it returned a nil object
  reference.
  </text>
</bug>

<bug id="3" date="Thu Nov  2 17:41:22 GMT 2000" user="dpg1">

  <summary>Unnecessary call to _is_a() after narrow()</summary>
  <text>
  After a call to _narrow(), an unnecessary call to _is_a() would be
  made on the first call to the narrowed reference.
  </text>
</bug>

<bug id="2" date="Wed Nov  1 11:21:45 GMT 2000" user="dpg1">

  <summary>Recursive structs inside interfaces</summary>

  <text>
  The IDL compiler would generate incorrect code for recursive structs
  declared within interfaces.
  </text>
</bug>

<bug id="1" date="Mon Oct  9 09:54:53 BST 2000" user="dpg1">

  <summary>Premature deletion of Python thread state</summary>

  <text>
  <p>
  If a servant method makes a call into omniORB which requires the ORB
  to make another up-call to Python, the thread state for the call is
  marked as inactive when the up-call finishes, even though the
  servant call is still in progress. If the method takes more than a
  minute to complete, without making any more re-entrant up-calls, the
  thread state will be deleted while the thread is still running.
  </p>
  <p>
  This is <em>not</em> the problem described <a
  href="http://www.uk.research.att.com/omniORB/archives/2000-10/0021.html">here</a>,
  which is due to mixing threads created with the <code>thread</code>
  package with primitives from the <code>threading</code> package.
  </p>
  </text>

</bug>


</buglist>
