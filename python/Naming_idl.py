# -*- Mode: Python; -*-
#                            Package   : omniORBpy
# Naming_idl.py              Created on: 1999/09/23
#                            Author    : Duncan Grisby (dpg1)
#
#    Copyright (C) 1999 AT&T Laboratories Cambridge
#
#    This file is part of the omniORBpy library
#
#    The omniORBpy library is free software; you can redistribute it
#    and/or modify it under the terms of the GNU Lesser General
#    Public License as published by the Free Software Foundation;
#    either version 2.1 of the License, or (at your option) any later
#    version.
#
#    This library is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Lesser General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public
#    License along with this library; if not, write to the Free
#    Software Foundation, Inc., 59 Temple Place - Suite 330, Boston,
#    MA 02111-1307, USA
#
#
# Description:
#    Python stubs generated by omniidl from Naming.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer

_omnipy.checkVersion(0,1, __file__)


#
# Start of module _GlobalIDL
#
__name__ = "_GlobalIDL"
_GlobalIDL     = omniORB.openModule("_GlobalIDL",     "Naming.idl")
POA__GlobalIDL = omniORB.openModule("POA__GlobalIDL", "Naming.idl")


#
# Start of module CosNaming
#
__name__ = "CosNaming"
CosNaming     = omniORB.openModule("CosNaming",     "Naming.idl")
POA_CosNaming = omniORB.openModule("POA_CosNaming", "Naming.idl")


# typedef ... Istring
CosNaming._d_Istring  = (omniORB.tcInternal.tv_string,0)
CosNaming._ad_Istring = (omniORB.tcInternal.tv_alias, "IDL:omg.org/CosNaming/Istring:1.0", "Istring", (omniORB.tcInternal.tv_string,0))
CosNaming._tc_Istring = omniORB.tcInternal.createTypeCode(CosNaming._ad_Istring)

# struct NameComponent
class NameComponent:
    _NP_RepositoryId = "IDL:omg.org/CosNaming/NameComponent:1.0"

    def __init__(self, id, kind):
        self.id = id
        self.kind = kind

CosNaming.NameComponent = NameComponent
CosNaming._d_NameComponent  = (omniORB.tcInternal.tv_struct, NameComponent, NameComponent._NP_RepositoryId, "NameComponent", "id", CosNaming._d_Istring, "kind", CosNaming._d_Istring)
CosNaming._tc_NameComponent = omniORB.tcInternal.createTypeCode(CosNaming._d_NameComponent)
omniORB.registerType(NameComponent._NP_RepositoryId, CosNaming._d_NameComponent, CosNaming._tc_NameComponent)
del NameComponent

# typedef ... Name
CosNaming._d_Name  = (omniORB.tcInternal.tv_sequence, CosNaming._d_NameComponent, 0)
CosNaming._ad_Name = (omniORB.tcInternal.tv_alias, "IDL:omg.org/CosNaming/Name:1.0", "Name", (omniORB.tcInternal.tv_sequence, CosNaming._d_NameComponent, 0))
CosNaming._tc_Name = omniORB.tcInternal.createTypeCode(CosNaming._ad_Name)

# enum BindingType
CosNaming.nobject = omniORB.EnumItem("nobject", 0)
CosNaming.ncontext = omniORB.EnumItem("ncontext", 1)
CosNaming.BindingType = omniORB.Enum("IDL:omg.org/CosNaming/BindingType:1.0", (CosNaming.nobject, CosNaming.ncontext))

CosNaming._d_BindingType  = (omniORB.tcInternal.tv_enum, CosNaming.BindingType._NP_RepositoryId, "BindingType", CosNaming.BindingType._items)
CosNaming._tc_BindingType = omniORB.tcInternal.createTypeCode(CosNaming._d_BindingType)
omniORB.registerType(CosNaming.BindingType._NP_RepositoryId, CosNaming._d_BindingType, CosNaming._tc_BindingType)

# struct Binding
class Binding:
    _NP_RepositoryId = "IDL:omg.org/CosNaming/Binding:1.0"

    def __init__(self, binding_name, binding_type):
        self.binding_name = binding_name
        self.binding_type = binding_type

CosNaming.Binding = Binding
CosNaming._d_Binding  = (omniORB.tcInternal.tv_struct, Binding, Binding._NP_RepositoryId, "Binding", "binding_name", CosNaming._d_Name, "binding_type", CosNaming._d_BindingType)
CosNaming._tc_Binding = omniORB.tcInternal.createTypeCode(CosNaming._d_Binding)
omniORB.registerType(Binding._NP_RepositoryId, CosNaming._d_Binding, CosNaming._tc_Binding)
del Binding

# typedef ... BindingList
CosNaming._d_BindingList  = (omniORB.tcInternal.tv_sequence, CosNaming._d_Binding, 0)
CosNaming._ad_BindingList = (omniORB.tcInternal.tv_alias, "IDL:omg.org/CosNaming/BindingList:1.0", "BindingList", (omniORB.tcInternal.tv_sequence, CosNaming._d_Binding, 0))
CosNaming._tc_BindingList = omniORB.tcInternal.createTypeCode(CosNaming._ad_BindingList)

# interface BindingIterator;
CosNaming._d_BindingIterator = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosNaming/BindingIterator:1.0", "BindingIterator")

# interface NamingContext;
CosNaming._d_NamingContext = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosNaming/NamingContext:1.0", "NamingContext")

# interface NamingContext
class NamingContext :
    _NP_RepositoryId = "IDL:omg.org/CosNaming/NamingContext:1.0"

    def __init__(self):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil

    
    # enum NotFoundReason
    missing_node = omniORB.EnumItem("missing_node", 0)
    not_context = omniORB.EnumItem("not_context", 1)
    not_object = omniORB.EnumItem("not_object", 2)
    NotFoundReason = omniORB.Enum("IDL:omg.org/CosNaming/NamingContext/NotFoundReason:1.0", (missing_node, not_context, not_object))
    
    _d_NotFoundReason  = (omniORB.tcInternal.tv_enum, NotFoundReason._NP_RepositoryId, "NotFoundReason", NotFoundReason._items)
    _tc_NotFoundReason = omniORB.tcInternal.createTypeCode(_d_NotFoundReason)
    omniORB.registerType(NotFoundReason._NP_RepositoryId, _d_NotFoundReason, _tc_NotFoundReason)
    
    # exception NotFound
    class NotFound (CORBA.UserException):
        _NP_RepositoryId = "IDL:omg.org/CosNaming/NamingContext/NotFound:1.0"
    
        def __init__(self, why, rest_of_name):
            self.why = why
            self.rest_of_name = rest_of_name
    
    _d_NotFound  = (omniORB.tcInternal.tv_except, NotFound, NotFound._NP_RepositoryId, "NotFound", "why", _d_NotFoundReason, "rest_of_name", CosNaming._d_Name)
    _tc_NotFound = omniORB.tcInternal.createTypeCode(_d_NotFound)
    omniORB.registerType(NotFound._NP_RepositoryId, _d_NotFound, _tc_NotFound)
    
    # exception CannotProceed
    class CannotProceed (CORBA.UserException):
        _NP_RepositoryId = "IDL:omg.org/CosNaming/NamingContext/CannotProceed:1.0"
    
        def __init__(self, cxt, rest_of_name):
            self.cxt = cxt
            self.rest_of_name = rest_of_name
    
    _d_CannotProceed  = (omniORB.tcInternal.tv_except, CannotProceed, CannotProceed._NP_RepositoryId, "CannotProceed", "cxt", CosNaming._d_NamingContext, "rest_of_name", CosNaming._d_Name)
    _tc_CannotProceed = omniORB.tcInternal.createTypeCode(_d_CannotProceed)
    omniORB.registerType(CannotProceed._NP_RepositoryId, _d_CannotProceed, _tc_CannotProceed)
    
    # exception InvalidName
    class InvalidName (CORBA.UserException):
        _NP_RepositoryId = "IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0"
    
    
    _d_InvalidName  = (omniORB.tcInternal.tv_except, InvalidName, InvalidName._NP_RepositoryId, "InvalidName")
    _tc_InvalidName = omniORB.tcInternal.createTypeCode(_d_InvalidName)
    omniORB.registerType(InvalidName._NP_RepositoryId, _d_InvalidName, _tc_InvalidName)
    
    # exception AlreadyBound
    class AlreadyBound (CORBA.UserException):
        _NP_RepositoryId = "IDL:omg.org/CosNaming/NamingContext/AlreadyBound:1.0"
    
    
    _d_AlreadyBound  = (omniORB.tcInternal.tv_except, AlreadyBound, AlreadyBound._NP_RepositoryId, "AlreadyBound")
    _tc_AlreadyBound = omniORB.tcInternal.createTypeCode(_d_AlreadyBound)
    omniORB.registerType(AlreadyBound._NP_RepositoryId, _d_AlreadyBound, _tc_AlreadyBound)
    
    # exception NotEmpty
    class NotEmpty (CORBA.UserException):
        _NP_RepositoryId = "IDL:omg.org/CosNaming/NamingContext/NotEmpty:1.0"
    
    
    _d_NotEmpty  = (omniORB.tcInternal.tv_except, NotEmpty, NotEmpty._NP_RepositoryId, "NotEmpty")
    _tc_NotEmpty = omniORB.tcInternal.createTypeCode(_d_NotEmpty)
    omniORB.registerType(NotEmpty._NP_RepositoryId, _d_NotEmpty, _tc_NotEmpty)

    _d_bind = ((CosNaming._d_Name, CORBA._d_Object), (), {NotFound._NP_RepositoryId: _d_NotFound, CannotProceed._NP_RepositoryId: _d_CannotProceed, InvalidName._NP_RepositoryId: _d_InvalidName, AlreadyBound._NP_RepositoryId: _d_AlreadyBound})
    _d_rebind = ((CosNaming._d_Name, CORBA._d_Object), (), {NotFound._NP_RepositoryId: _d_NotFound, CannotProceed._NP_RepositoryId: _d_CannotProceed, InvalidName._NP_RepositoryId: _d_InvalidName})
    _d_bind_context = ((CosNaming._d_Name, CosNaming._d_NamingContext), (), {NotFound._NP_RepositoryId: _d_NotFound, CannotProceed._NP_RepositoryId: _d_CannotProceed, InvalidName._NP_RepositoryId: _d_InvalidName, AlreadyBound._NP_RepositoryId: _d_AlreadyBound})
    _d_rebind_context = ((CosNaming._d_Name, CosNaming._d_NamingContext), (), {NotFound._NP_RepositoryId: _d_NotFound, CannotProceed._NP_RepositoryId: _d_CannotProceed, InvalidName._NP_RepositoryId: _d_InvalidName})
    _d_resolve = ((CosNaming._d_Name, ), (CORBA._d_Object, ), {NotFound._NP_RepositoryId: _d_NotFound, CannotProceed._NP_RepositoryId: _d_CannotProceed, InvalidName._NP_RepositoryId: _d_InvalidName})
    _d_unbind = ((CosNaming._d_Name, ), (), {NotFound._NP_RepositoryId: _d_NotFound, CannotProceed._NP_RepositoryId: _d_CannotProceed, InvalidName._NP_RepositoryId: _d_InvalidName})
    _d_new_context = ((), (CosNaming._d_NamingContext, ), None)
    _d_bind_new_context = ((CosNaming._d_Name, ), (CosNaming._d_NamingContext, ), {NotFound._NP_RepositoryId: _d_NotFound, CannotProceed._NP_RepositoryId: _d_CannotProceed, InvalidName._NP_RepositoryId: _d_InvalidName, AlreadyBound._NP_RepositoryId: _d_AlreadyBound})
    _d_destroy = ((), (), {NotEmpty._NP_RepositoryId: _d_NotEmpty})
    _d_list = ((omniORB.tcInternal.tv_ulong, ), (CosNaming._d_BindingList, CosNaming._d_BindingIterator), None)

CosNaming.NamingContext = NamingContext
CosNaming._d_NamingContext  = (omniORB.tcInternal.tv_objref, NamingContext._NP_RepositoryId, "NamingContext")
CosNaming._tc_NamingContext = omniORB.tcInternal.createTypeCode(CosNaming._d_NamingContext)
omniORB.registerType(NamingContext._NP_RepositoryId, CosNaming._d_NamingContext, CosNaming._tc_NamingContext)

# NamingContext object reference
class _objref_NamingContext (CORBA.Object):
    _NP_RepositoryId = NamingContext._NP_RepositoryId

    def __del__(self):
        if _omnipy is not None:
            _omnipy.releaseObjref(self)

    def __init__(self):
        CORBA.Object.__init__(self)

    def bind(self, *args):
        return _omnipy.invokeOp(self, "bind",
                                CosNaming.NamingContext._d_bind,
                                args)

    def rebind(self, *args):
        return _omnipy.invokeOp(self, "rebind",
                                CosNaming.NamingContext._d_rebind,
                                args)

    def bind_context(self, *args):
        return _omnipy.invokeOp(self, "bind_context",
                                CosNaming.NamingContext._d_bind_context,
                                args)

    def rebind_context(self, *args):
        return _omnipy.invokeOp(self, "rebind_context",
                                CosNaming.NamingContext._d_rebind_context,
                                args)

    def resolve(self, *args):
        return _omnipy.invokeOp(self, "resolve",
                                CosNaming.NamingContext._d_resolve,
                                args)

    def unbind(self, *args):
        return _omnipy.invokeOp(self, "unbind",
                                CosNaming.NamingContext._d_unbind,
                                args)

    def new_context(self, *args):
        return _omnipy.invokeOp(self, "new_context",
                                CosNaming.NamingContext._d_new_context,
                                args)

    def bind_new_context(self, *args):
        return _omnipy.invokeOp(self, "bind_new_context",
                                CosNaming.NamingContext._d_bind_new_context,
                                args)

    def destroy(self, *args):
        return _omnipy.invokeOp(self, "destroy",
                                CosNaming.NamingContext._d_destroy,
                                args)

    def list(self, *args):
        return _omnipy.invokeOp(self, "list",
                                CosNaming.NamingContext._d_list,
                                args)

    __methods__ = ["bind", "rebind", "bind_context", "rebind_context", "resolve", "unbind", "new_context", "bind_new_context", "destroy", "list"] + CORBA.Object.__methods__

omniORB.registerObjref(NamingContext._NP_RepositoryId, _objref_NamingContext)
CosNaming._objref_NamingContext = _objref_NamingContext
del NamingContext, _objref_NamingContext

# NamingContext skeleton
__name__ = "POA_CosNaming"
class NamingContext (PortableServer.Servant):
    _NP_RepositoryId = CosNaming.NamingContext._NP_RepositoryId

    def __del__(self):
        if _omnipy is not None:
            _omnipy.releaseObjref(self)

    _op_d = {"bind": CosNaming.NamingContext._d_bind, "rebind": CosNaming.NamingContext._d_rebind, "bind_context": CosNaming.NamingContext._d_bind_context, "rebind_context": CosNaming.NamingContext._d_rebind_context, "resolve": CosNaming.NamingContext._d_resolve, "unbind": CosNaming.NamingContext._d_unbind, "new_context": CosNaming.NamingContext._d_new_context, "bind_new_context": CosNaming.NamingContext._d_bind_new_context, "destroy": CosNaming.NamingContext._d_destroy, "list": CosNaming.NamingContext._d_list}

POA_CosNaming.NamingContext = NamingContext
del NamingContext
__name__ = "CosNaming"

# interface BindingIterator
class BindingIterator :
    _NP_RepositoryId = "IDL:omg.org/CosNaming/BindingIterator:1.0"

    def __init__(self):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil

    _d_next_one = ((), (omniORB.tcInternal.tv_boolean, CosNaming._d_Binding), None)
    _d_next_n = ((omniORB.tcInternal.tv_ulong, ), (omniORB.tcInternal.tv_boolean, CosNaming._d_BindingList), None)
    _d_destroy = ((), (), None)

CosNaming.BindingIterator = BindingIterator
CosNaming._d_BindingIterator  = (omniORB.tcInternal.tv_objref, BindingIterator._NP_RepositoryId, "BindingIterator")
CosNaming._tc_BindingIterator = omniORB.tcInternal.createTypeCode(CosNaming._d_BindingIterator)
omniORB.registerType(BindingIterator._NP_RepositoryId, CosNaming._d_BindingIterator, CosNaming._tc_BindingIterator)

# BindingIterator object reference
class _objref_BindingIterator (CORBA.Object):
    _NP_RepositoryId = BindingIterator._NP_RepositoryId

    def __del__(self):
        if _omnipy is not None:
            _omnipy.releaseObjref(self)

    def __init__(self):
        CORBA.Object.__init__(self)

    def next_one(self, *args):
        return _omnipy.invokeOp(self, "next_one",
                                CosNaming.BindingIterator._d_next_one,
                                args)

    def next_n(self, *args):
        return _omnipy.invokeOp(self, "next_n",
                                CosNaming.BindingIterator._d_next_n,
                                args)

    def destroy(self, *args):
        return _omnipy.invokeOp(self, "destroy",
                                CosNaming.BindingIterator._d_destroy,
                                args)

    __methods__ = ["next_one", "next_n", "destroy"] + CORBA.Object.__methods__

omniORB.registerObjref(BindingIterator._NP_RepositoryId, _objref_BindingIterator)
CosNaming._objref_BindingIterator = _objref_BindingIterator
del BindingIterator, _objref_BindingIterator

# BindingIterator skeleton
__name__ = "POA_CosNaming"
class BindingIterator (PortableServer.Servant):
    _NP_RepositoryId = CosNaming.BindingIterator._NP_RepositoryId

    def __del__(self):
        if _omnipy is not None:
            _omnipy.releaseObjref(self)

    _op_d = {"next_one": CosNaming.BindingIterator._d_next_one, "next_n": CosNaming.BindingIterator._d_next_n, "destroy": CosNaming.BindingIterator._d_destroy}

POA_CosNaming.BindingIterator = BindingIterator
del BindingIterator
__name__ = "CosNaming"

__name__ = "_GlobalIDL"
#
# End of module CosNaming
#


__name__ = "_GlobalIDL"
#
# End of module _GlobalIDL
#


__name__ = "Naming_idl"

# The end.
